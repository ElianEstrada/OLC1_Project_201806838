
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminuslefttk_inctk_decres_break res_case res_continue res_default res_else res_false res_for res_if res_length res_main res_new res_null res_print res_read res_return res_round res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breakptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_dec\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[12,12,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,12,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,12,12,12,12,12,-18,-24,-27,-28,12,-36,-29,12,12,12,-26,12,12,12,12,-25,-37,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,44,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[13,13,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,13,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,13,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,13,13,13,13,13,-18,-24,-27,-28,13,-36,-29,13,13,13,-26,13,13,13,13,-25,-37,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,13,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,121,122,123,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[14,14,-3,-72,-72,-72,-72,-8,-9,-72,-11,36,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,49,-20,-21,49,49,49,49,68,-13,49,-15,-70,-16,49,49,49,-64,-65,-66,-67,-68,-69,-71,-14,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-62,-63,-60,-61,-19,49,14,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,14,14,14,14,49,14,136,-18,-24,-27,-28,14,-36,-29,14,14,14,-26,14,14,14,14,-25,-37,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[15,15,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,15,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,15,15,15,15,15,-18,-24,-27,-28,15,-36,-29,15,15,15,-26,15,15,15,15,-25,-37,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[20,20,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,20,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,20,20,20,20,20,-18,-24,-27,-28,20,-36,-29,20,20,20,-26,20,20,20,20,-25,-37,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,137,138,139,140,142,143,144,145,146,147,148,149,],[22,22,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,22,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,22,22,22,22,22,-18,-24,-27,-28,22,-36,22,-29,22,22,22,-26,22,22,22,22,-25,-37,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[23,23,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,23,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,23,23,23,23,23,-18,-24,-27,-28,23,-36,-29,23,23,23,-26,23,23,23,23,-25,-37,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[24,24,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,24,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,24,24,24,24,24,-18,-24,-27,-28,24,-36,-29,24,24,24,-26,24,24,24,24,-25,-37,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[25,25,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,25,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,25,25,25,25,25,-18,-24,-27,-28,25,-36,-29,25,25,25,-26,25,25,25,25,-25,-37,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,115,116,122,124,125,126,127,130,132,138,139,140,142,143,144,145,146,147,148,149,],[26,26,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,26,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,26,26,26,26,26,-18,-24,-27,-28,26,-36,-29,26,26,26,-26,26,26,26,26,-25,-37,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,124,125,126,127,132,138,143,148,149,],[0,-1,-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-18,-24,-27,-28,-36,-29,-26,-25,-37,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,117,118,120,122,124,125,126,127,128,129,132,138,139,143,144,146,147,148,149,],[-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,124,125,126,127,-31,132,-18,-24,-27,-28,138,-30,-36,-29,-33,-26,-32,148,149,-25,-37,]),'res_default':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,118,120,124,125,126,127,129,132,138,143,144,148,149,],[-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,119,119,-31,-18,-24,-27,-28,-30,-36,-29,-26,-32,-25,-37,]),'res_case':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,88,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,118,120,124,125,126,127,129,132,138,143,144,148,149,],[-3,-72,-72,-72,-72,-8,-9,-72,-11,-22,-23,-34,-35,-42,-17,-2,-4,-43,-44,-5,-6,-7,-10,-12,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,-14,-62,-63,-60,-61,-19,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,121,121,-31,-18,-24,-27,-28,-30,-36,-29,-26,-32,-25,-37,]),'tk_dotcomma':([4,5,6,7,10,12,20,36,38,39,46,48,49,50,54,55,56,57,58,59,60,65,66,67,70,85,86,88,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,],[29,29,29,29,29,35,-42,-72,-20,-21,-13,-15,-70,-16,-64,-65,-66,-67,-68,-69,-71,94,-38,-39,-14,-62,-63,-60,-61,-19,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,123,]),'tk_assig':([14,36,68,136,],[37,47,37,37,]),'tk_inc':([14,49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,136,],[38,-70,85,-64,-65,-66,-67,-68,-69,-71,85,85,85,85,85,-62,-63,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-45,85,85,38,]),'tk_dec':([14,49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,136,],[39,-70,86,-64,-65,-66,-67,-68,-69,-71,86,86,86,86,86,-62,-63,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-45,86,86,39,]),'tk_par_o':([15,22,23,24,25,26,37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[40,41,42,43,44,45,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'tk_sub':([37,40,41,42,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,121,131,],[52,52,52,52,52,52,-70,72,52,52,52,-64,-65,-66,-67,-68,-69,-71,72,72,72,72,72,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-62,-63,72,-60,72,52,-46,-47,-48,-49,-50,-51,72,72,72,72,72,72,72,72,-45,72,52,72,]),'tk_not':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'tk_int':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'tk_decimal':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'tk_string':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'tk_char':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'res_true':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'res_false':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'res_null':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'tk_par_c':([38,39,45,49,50,54,55,56,57,58,59,60,61,62,63,64,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,133,134,135,],[-20,-21,69,-70,-16,-64,-65,-66,-67,-68,-69,-71,90,91,92,93,-62,-63,110,-60,-61,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,141,-40,-41,]),'tk_add':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,71,-64,-65,-66,-67,-68,-69,-71,71,71,71,71,71,-62,-63,71,-60,71,-46,-47,-48,-49,-50,-51,71,71,71,71,71,71,71,71,-45,71,71,]),'tk_mult':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,73,-64,-65,-66,-67,-68,-69,-71,73,73,73,73,73,-62,-63,73,-60,73,73,73,-48,-49,-50,-51,73,73,73,73,73,73,73,73,-45,73,73,]),'tk_div':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,74,-64,-65,-66,-67,-68,-69,-71,74,74,74,74,74,-62,-63,74,-60,74,74,74,-48,-49,-50,-51,74,74,74,74,74,74,74,74,-45,74,74,]),'tk_module':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,75,-64,-65,-66,-67,-68,-69,-71,75,75,75,75,75,-62,-63,75,-60,75,75,75,-48,-49,-50,-51,75,75,75,75,75,75,75,75,-45,75,75,]),'tk_pow':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,76,-64,-65,-66,-67,-68,-69,-71,76,76,76,76,76,-62,-63,76,-60,76,76,76,76,76,76,-51,76,76,76,76,76,76,76,76,-45,76,76,]),'tk_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,77,-64,-65,-66,-67,-68,-69,-71,77,77,77,77,77,-62,-63,77,-60,77,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,77,77,-45,77,77,]),'tk_different':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,78,-64,-65,-66,-67,-68,-69,-71,78,78,78,78,78,-62,-63,78,-60,78,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,78,78,-45,78,78,]),'tk_greater':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,79,-64,-65,-66,-67,-68,-69,-71,79,79,79,79,79,-62,-63,79,-60,79,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,79,79,-45,79,79,]),'tk_greater_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,80,-64,-65,-66,-67,-68,-69,-71,80,80,80,80,80,-62,-63,80,-60,80,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,80,80,-45,80,80,]),'tk_less':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,81,-64,-65,-66,-67,-68,-69,-71,81,81,81,81,81,-62,-63,81,-60,81,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,81,81,-45,81,81,]),'tk_less_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,82,-64,-65,-66,-67,-68,-69,-71,82,82,82,82,82,-62,-63,82,-60,82,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,82,82,-45,82,82,]),'tk_and':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,83,-64,-65,-66,-67,-68,-69,-71,83,83,83,83,83,-62,-63,83,-60,-61,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,83,-45,83,83,]),'tk_or':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,131,],[-70,84,-64,-65,-66,-67,-68,-69,-71,84,84,84,84,84,-62,-63,84,-60,-61,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,84,84,]),'tk_twodot':([49,54,55,56,57,58,59,60,85,86,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,131,],[-70,-64,-65,-66,-67,-68,-69,-71,-62,-63,-60,-61,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,130,140,]),'tk_key_o':([69,91,92,93,137,141,],[95,111,112,113,142,145,]),'res_else':([125,],[137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,95,111,113,130,140,142,145,],[2,115,116,122,139,144,146,147,]),'instruction':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[3,27,3,3,3,27,27,27,3,27,3,3,27,3,27,27,]),'statement':([0,2,44,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[4,4,66,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,44,95,111,113,115,116,122,123,130,139,140,142,144,145,146,147,],[5,5,67,5,5,5,5,5,5,135,5,5,5,5,5,5,5,5,]),'print':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,95,111,113,115,116,122,123,130,139,140,142,144,145,146,147,],[7,7,7,7,7,7,7,7,134,7,7,7,7,7,7,7,7,]),'conditional':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'transfer':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'functions':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'con_if':([0,2,95,111,113,115,116,122,130,137,139,140,142,144,145,146,147,],[16,16,16,16,16,16,16,16,16,143,16,16,16,16,16,16,16,]),'con_switch':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'loop_while':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'loop_for':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'function_main':([0,2,95,111,113,115,116,122,130,139,140,142,144,145,146,147,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ptcommaP':([4,5,6,7,10,],[28,31,32,33,34,]),'empty':([4,5,6,7,10,36,],[30,30,30,30,30,48,]),'statementP':([36,],[46,]),'expression':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,121,],[50,61,62,63,64,70,87,88,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,131,]),'for_init':([44,],[65,]),'default':([112,118,],[117,128,]),'list_case':([112,],[118,]),'case':([112,118,],[120,129,]),'for_advance':([123,],[133,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',225),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',231),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',237),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',246),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',247),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',248),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',249),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',250),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',251),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',252),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',253),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',257),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',266),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',274),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',275),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',284),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',291),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',297),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',304),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',311),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',312),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',323),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',324),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',328),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',332),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',336),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',341),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',345),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',349),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',353),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',361),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',368),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',374),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',381),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',382),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',388),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',393),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',398),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',399),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',404),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',405),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',413),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',421),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',422),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',429),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',433),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',434),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',435),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',436),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',437),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',438),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',439),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',440),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',441),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',442),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',443),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',444),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',445),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',446),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',479),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',480),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',487),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',488),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',497),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',502),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',506),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',510),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',514),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',515),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',519),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',523),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',529),
]
