
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusrighttk_fcastlefttk_inctk_decres_break res_case res_char res_continue res_default res_double res_else res_false res_for res_if res_int res_length res_main res_new res_null res_print res_read res_return res_round res_string res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breaktype : res_int\n            | res_char\n            | res_string\n            | res_doubleptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_decexpression : tk_par_o type tk_par_c expression %prec tk_fcast\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[12,12,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,12,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,12,12,12,-68,12,12,-18,-24,-27,-28,12,-36,-29,12,12,12,-26,12,12,12,12,-25,-37,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,44,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[13,13,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,13,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,13,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,13,13,13,-68,13,13,-18,-24,-27,-28,13,-36,-29,13,13,13,-26,13,13,13,13,-25,-37,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,13,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,93,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,121,122,123,128,129,130,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[14,14,-3,-77,-77,-77,-77,-8,-9,-77,-11,36,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,49,-20,-21,49,49,49,49,68,-13,49,-15,-75,-16,49,49,49,-69,-70,-71,-72,-73,-74,-76,-14,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-66,-67,-64,-65,-19,49,14,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,49,14,14,14,-68,14,49,14,143,-18,-24,-27,-28,14,-36,-29,14,14,14,-26,14,14,14,14,-25,-37,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[15,15,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,15,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,15,15,15,-68,15,15,-18,-24,-27,-28,15,-36,-29,15,15,15,-26,15,15,15,15,-25,-37,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[20,20,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,20,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,20,20,20,-68,20,20,-18,-24,-27,-28,20,-36,-29,20,20,20,-26,20,20,20,20,-25,-37,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,144,145,146,147,149,150,151,152,153,154,155,156,],[22,22,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,22,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,22,22,22,-68,22,22,-18,-24,-27,-28,22,-36,22,-29,22,22,22,-26,22,22,22,22,-25,-37,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[23,23,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,23,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,23,23,23,-68,23,23,-18,-24,-27,-28,23,-36,-29,23,23,23,-26,23,23,23,23,-25,-37,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[24,24,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,24,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,24,24,24,-68,24,24,-18,-24,-27,-28,24,-36,-29,24,24,24,-26,24,24,24,24,-25,-37,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[25,25,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,25,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,25,25,25,-68,25,25,-18,-24,-27,-28,25,-36,-29,25,25,25,-26,25,25,25,25,-25,-37,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,123,129,131,132,133,134,137,139,145,146,147,149,150,151,152,153,154,155,156,],[26,26,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,26,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,26,26,26,-68,26,26,-18,-24,-27,-28,26,-36,-29,26,26,26,-26,26,26,26,26,-25,-37,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,131,132,133,134,139,145,150,155,156,],[0,-1,-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,-68,-18,-24,-27,-28,-36,-29,-26,-25,-37,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,122,123,124,125,127,129,131,132,133,134,135,136,139,145,146,150,151,153,154,155,156,],[-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,131,-68,132,133,134,-31,139,-18,-24,-27,-28,145,-30,-36,-29,-33,-26,-32,155,156,-25,-37,]),'res_default':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,118,122,125,127,131,132,133,134,136,139,145,150,151,155,156,],[-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,126,-68,126,-31,-18,-24,-27,-28,-30,-36,-29,-26,-32,-25,-37,]),'res_case':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,118,122,125,127,131,132,133,134,136,139,145,150,151,155,156,],[-3,-77,-77,-77,-77,-8,-9,-77,-11,-22,-23,-34,-35,-42,-17,-2,-4,-47,-48,-5,-6,-7,-10,-12,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,-14,-66,-67,-64,-65,-19,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,128,-68,128,-31,-18,-24,-27,-28,-30,-36,-29,-26,-32,-25,-37,]),'tk_dotcomma':([4,5,6,7,10,12,20,36,38,39,46,48,49,50,54,55,56,57,58,59,60,65,66,67,70,85,86,93,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,],[29,29,29,29,29,35,-42,-77,-20,-21,-13,-15,-75,-16,-69,-70,-71,-72,-73,-74,-76,99,-38,-39,-14,-66,-67,-64,-65,-19,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,130,-68,]),'tk_assig':([14,36,68,143,],[37,47,37,37,]),'tk_inc':([14,49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,143,],[38,-75,85,-69,-70,-71,-72,-73,-74,-76,85,85,85,85,85,-66,-67,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-49,85,85,85,38,]),'tk_dec':([14,49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,143,],[39,-75,86,-69,-70,-71,-72,-73,-74,-76,86,86,86,86,86,-66,-67,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-49,86,86,86,39,]),'tk_par_o':([15,22,23,24,25,26,37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[40,41,42,43,44,45,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'tk_sub':([37,40,41,42,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,94,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,122,128,138,],[52,52,52,52,52,52,-75,72,52,52,52,-69,-70,-71,-72,-73,-74,-76,72,72,72,72,72,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-66,-67,72,-64,72,52,-50,-51,-52,-53,-54,-55,72,72,72,72,72,72,72,72,-49,52,72,-68,52,72,]),'tk_not':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'tk_int':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'tk_decimal':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'tk_string':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'tk_char':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'res_true':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'res_false':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'res_null':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'tk_par_c':([38,39,45,49,50,54,55,56,57,58,59,60,61,62,63,64,85,86,87,88,89,90,91,92,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,140,141,142,],[-20,-21,69,-75,-16,-69,-70,-71,-72,-73,-74,-76,95,96,97,98,-66,-67,115,116,-43,-44,-45,-46,-64,-65,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,-68,148,-40,-41,]),'tk_add':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,71,-69,-70,-71,-72,-73,-74,-76,71,71,71,71,71,-66,-67,71,-64,71,-50,-51,-52,-53,-54,-55,71,71,71,71,71,71,71,71,-49,71,-68,71,]),'tk_mult':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,73,-69,-70,-71,-72,-73,-74,-76,73,73,73,73,73,-66,-67,73,-64,73,73,73,-52,-53,-54,-55,73,73,73,73,73,73,73,73,-49,73,-68,73,]),'tk_div':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,74,-69,-70,-71,-72,-73,-74,-76,74,74,74,74,74,-66,-67,74,-64,74,74,74,-52,-53,-54,-55,74,74,74,74,74,74,74,74,-49,74,-68,74,]),'tk_module':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,75,-69,-70,-71,-72,-73,-74,-76,75,75,75,75,75,-66,-67,75,-64,75,75,75,-52,-53,-54,-55,75,75,75,75,75,75,75,75,-49,75,-68,75,]),'tk_pow':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,76,-69,-70,-71,-72,-73,-74,-76,76,76,76,76,76,-66,-67,76,-64,76,76,76,76,76,76,-55,76,76,76,76,76,76,76,76,-49,76,-68,76,]),'tk_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,77,-69,-70,-71,-72,-73,-74,-76,77,77,77,77,77,-66,-67,77,-64,77,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,77,77,-49,77,-68,77,]),'tk_different':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,78,-69,-70,-71,-72,-73,-74,-76,78,78,78,78,78,-66,-67,78,-64,78,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,78,78,-49,78,-68,78,]),'tk_greater':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,79,-69,-70,-71,-72,-73,-74,-76,79,79,79,79,79,-66,-67,79,-64,79,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,79,79,-49,79,-68,79,]),'tk_greater_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,80,-69,-70,-71,-72,-73,-74,-76,80,80,80,80,80,-66,-67,80,-64,80,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,80,80,-49,80,-68,80,]),'tk_less':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,81,-69,-70,-71,-72,-73,-74,-76,81,81,81,81,81,-66,-67,81,-64,81,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,81,81,-49,81,-68,81,]),'tk_less_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,82,-69,-70,-71,-72,-73,-74,-76,82,82,82,82,82,-66,-67,82,-64,82,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,82,82,-49,82,-68,82,]),'tk_and':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,83,-69,-70,-71,-72,-73,-74,-76,83,83,83,83,83,-66,-67,83,-64,-65,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,83,-49,83,-68,83,]),'tk_or':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,122,138,],[-75,84,-69,-70,-71,-72,-73,-74,-76,84,84,84,84,84,-66,-67,84,-64,-65,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,84,-68,84,]),'tk_twodot':([49,54,55,56,57,58,59,60,85,86,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,126,138,],[-75,-69,-70,-71,-72,-73,-74,-76,-66,-67,-64,-65,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-49,-68,137,147,]),'res_int':([51,],[89,]),'res_char':([51,],[90,]),'res_string':([51,],[91,]),'res_double':([51,],[92,]),'tk_key_o':([69,96,97,98,144,148,],[100,117,118,119,149,152,]),'res_else':([132,],[144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,100,117,119,137,147,149,152,],[2,121,123,129,146,151,153,154,]),'instruction':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[3,27,3,3,3,27,27,27,3,27,3,3,27,3,27,27,]),'statement':([0,2,44,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[4,4,66,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,44,100,117,119,121,123,129,130,137,146,147,149,151,152,153,154,],[5,5,67,5,5,5,5,5,5,142,5,5,5,5,5,5,5,5,]),'print':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,100,117,119,121,123,129,130,137,146,147,149,151,152,153,154,],[7,7,7,7,7,7,7,7,141,7,7,7,7,7,7,7,7,]),'conditional':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'transfer':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'functions':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'con_if':([0,2,100,117,119,121,123,129,137,144,146,147,149,151,152,153,154,],[16,16,16,16,16,16,16,16,16,150,16,16,16,16,16,16,16,]),'con_switch':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'loop_while':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'loop_for':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'function_main':([0,2,100,117,119,121,123,129,137,146,147,149,151,152,153,154,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ptcommaP':([4,5,6,7,10,],[28,31,32,33,34,]),'empty':([4,5,6,7,10,36,],[30,30,30,30,30,48,]),'statementP':([36,],[46,]),'expression':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,99,116,128,],[50,61,62,63,64,70,87,93,94,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,122,138,]),'for_init':([44,],[65,]),'type':([51,],[88,]),'default':([118,125,],[124,135,]),'list_case':([118,],[125,]),'case':([118,125,],[127,136,]),'for_advance':([130,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',234),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',240),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',246),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',255),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',256),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',257),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',258),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',259),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',260),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',261),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',262),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',266),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',275),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',283),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',284),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',293),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',300),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',306),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',313),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',320),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',321),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',332),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',333),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',337),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',341),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',345),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',350),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',354),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',358),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',362),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',370),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',377),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',383),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',390),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',391),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',397),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',402),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',407),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',408),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',413),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',414),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',422),
  ('type -> res_int','type',1,'p_type','grammar.py',429),
  ('type -> res_char','type',1,'p_type','grammar.py',430),
  ('type -> res_string','type',1,'p_type','grammar.py',431),
  ('type -> res_double','type',1,'p_type','grammar.py',432),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',449),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',450),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',457),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',461),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',462),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',463),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',464),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',465),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',466),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',467),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',468),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',469),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',470),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',471),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',472),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',473),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',474),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',507),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',508),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',515),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',516),
  ('expression -> tk_par_o type tk_par_c expression','expression',4,'p_expression_unary_cast','grammar.py',524),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',530),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',535),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',539),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',543),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',547),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',548),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',552),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',556),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',562),
]
