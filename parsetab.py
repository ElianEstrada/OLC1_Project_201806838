
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusrighttk_fcastlefttk_inctk_decres_boolean res_break res_case res_char res_continue res_default res_double res_else res_false res_for res_if res_int res_length res_main res_new res_null res_print res_read res_return res_round res_string res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breaktype : res_int\n            | res_char\n            | res_string\n            | res_double\n            | res_booleanptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_decexpression : tk_par_o type tk_par_c expression %prec tk_fcast\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[12,12,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,12,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,12,12,12,-69,12,12,-18,-24,-27,-28,12,-36,-29,12,12,12,-26,12,12,12,12,-25,-37,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,44,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[13,13,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,13,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,13,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,13,13,13,-69,13,13,-18,-24,-27,-28,13,-36,-29,13,13,13,-26,13,13,13,13,-25,-37,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,13,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,96,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,124,129,130,131,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[14,14,-3,-78,-78,-78,-78,-8,-9,-78,-11,36,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,49,-20,-21,49,49,49,49,68,-13,49,-15,-76,-16,49,49,49,-70,-71,-72,-73,-74,-75,-77,-14,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-67,-68,-65,-66,-19,49,14,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,49,14,14,14,-69,14,49,14,144,-18,-24,-27,-28,14,-36,-29,14,14,14,-26,14,14,14,14,-25,-37,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[15,15,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,15,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,15,15,15,-69,15,15,-18,-24,-27,-28,15,-36,-29,15,15,15,-26,15,15,15,15,-25,-37,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[20,20,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,20,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,20,20,20,-69,20,20,-18,-24,-27,-28,20,-36,-29,20,20,20,-26,20,20,20,20,-25,-37,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,145,146,147,148,150,151,152,153,154,155,156,157,],[22,22,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,22,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,22,22,22,-69,22,22,-18,-24,-27,-28,22,-36,22,-29,22,22,22,-26,22,22,22,22,-25,-37,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[23,23,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,23,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,23,23,23,-69,23,23,-18,-24,-27,-28,23,-36,-29,23,23,23,-26,23,23,23,23,-25,-37,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[24,24,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,24,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,24,24,24,-69,24,24,-18,-24,-27,-28,24,-36,-29,24,24,24,-26,24,24,24,24,-25,-37,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[25,25,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,25,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,25,25,25,-69,25,25,-18,-24,-27,-28,25,-36,-29,25,25,25,-26,25,25,25,25,-25,-37,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,124,130,132,133,134,135,138,140,146,147,148,150,151,152,153,154,155,156,157,],[26,26,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,26,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,26,26,26,-69,26,26,-18,-24,-27,-28,26,-36,-29,26,26,26,-26,26,26,26,26,-25,-37,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,132,133,134,135,140,146,151,156,157,],[0,-1,-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,-69,-18,-24,-27,-28,-36,-29,-26,-25,-37,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,122,123,124,125,126,128,130,132,133,134,135,136,137,140,146,147,151,152,154,155,156,157,],[-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,132,-69,133,134,135,-31,140,-18,-24,-27,-28,146,-30,-36,-29,-33,-26,-32,156,157,-25,-37,]),'res_default':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,123,126,128,132,133,134,135,137,140,146,151,152,156,157,],[-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,127,-69,127,-31,-18,-24,-27,-28,-30,-36,-29,-26,-32,-25,-37,]),'res_case':([3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,38,39,46,48,49,50,54,55,56,57,58,59,60,70,85,86,94,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,123,126,128,132,133,134,135,137,140,146,151,152,156,157,],[-3,-78,-78,-78,-78,-8,-9,-78,-11,-22,-23,-34,-35,-42,-17,-2,-4,-48,-49,-5,-6,-7,-10,-12,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,-14,-67,-68,-65,-66,-19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,129,-69,129,-31,-18,-24,-27,-28,-30,-36,-29,-26,-32,-25,-37,]),'tk_dotcomma':([4,5,6,7,10,12,20,36,38,39,46,48,49,50,54,55,56,57,58,59,60,65,66,67,70,85,86,94,95,96,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,],[29,29,29,29,29,35,-42,-78,-20,-21,-13,-15,-76,-16,-70,-71,-72,-73,-74,-75,-77,100,-38,-39,-14,-67,-68,-65,-66,-19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,131,-69,]),'tk_assig':([14,36,68,144,],[37,47,37,37,]),'tk_inc':([14,49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,144,],[38,-76,85,-70,-71,-72,-73,-74,-75,-77,85,85,85,85,85,-67,-68,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-50,85,85,85,38,]),'tk_dec':([14,49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,144,],[39,-76,86,-70,-71,-72,-73,-74,-75,-77,86,86,86,86,86,-67,-68,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-50,86,86,86,39,]),'tk_par_o':([15,22,23,24,25,26,37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[40,41,42,43,44,45,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'tk_sub':([37,40,41,42,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,121,123,129,139,],[52,52,52,52,52,52,-76,72,52,52,52,-70,-71,-72,-73,-74,-75,-77,72,72,72,72,72,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-67,-68,72,-65,72,52,-51,-52,-53,-54,-55,-56,72,72,72,72,72,72,72,72,-50,52,72,-69,52,72,]),'tk_not':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'tk_int':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'tk_decimal':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'tk_string':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'tk_char':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'res_true':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'res_false':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'res_null':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'tk_par_c':([38,39,45,49,50,54,55,56,57,58,59,60,61,62,63,64,85,86,87,88,89,90,91,92,93,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,141,142,143,],[-20,-21,69,-76,-16,-70,-71,-72,-73,-74,-75,-77,96,97,98,99,-67,-68,116,117,-43,-44,-45,-46,-47,-65,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,-69,149,-40,-41,]),'tk_add':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,71,-70,-71,-72,-73,-74,-75,-77,71,71,71,71,71,-67,-68,71,-65,71,-51,-52,-53,-54,-55,-56,71,71,71,71,71,71,71,71,-50,71,-69,71,]),'tk_mult':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,73,-70,-71,-72,-73,-74,-75,-77,73,73,73,73,73,-67,-68,73,-65,73,73,73,-53,-54,-55,-56,73,73,73,73,73,73,73,73,-50,73,-69,73,]),'tk_div':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,74,-70,-71,-72,-73,-74,-75,-77,74,74,74,74,74,-67,-68,74,-65,74,74,74,-53,-54,-55,-56,74,74,74,74,74,74,74,74,-50,74,-69,74,]),'tk_module':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,75,-70,-71,-72,-73,-74,-75,-77,75,75,75,75,75,-67,-68,75,-65,75,75,75,-53,-54,-55,-56,75,75,75,75,75,75,75,75,-50,75,-69,75,]),'tk_pow':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,76,-70,-71,-72,-73,-74,-75,-77,76,76,76,76,76,-67,-68,76,-65,76,76,76,76,76,76,-56,76,76,76,76,76,76,76,76,-50,76,-69,76,]),'tk_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,77,-70,-71,-72,-73,-74,-75,-77,77,77,77,77,77,-67,-68,77,-65,77,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,77,77,-50,77,-69,77,]),'tk_different':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,78,-70,-71,-72,-73,-74,-75,-77,78,78,78,78,78,-67,-68,78,-65,78,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,78,78,-50,78,-69,78,]),'tk_greater':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,79,-70,-71,-72,-73,-74,-75,-77,79,79,79,79,79,-67,-68,79,-65,79,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,79,79,-50,79,-69,79,]),'tk_greater_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,80,-70,-71,-72,-73,-74,-75,-77,80,80,80,80,80,-67,-68,80,-65,80,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,80,80,-50,80,-69,80,]),'tk_less':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,81,-70,-71,-72,-73,-74,-75,-77,81,81,81,81,81,-67,-68,81,-65,81,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,81,81,-50,81,-69,81,]),'tk_less_equals':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,82,-70,-71,-72,-73,-74,-75,-77,82,82,82,82,82,-67,-68,82,-65,82,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,82,82,-50,82,-69,82,]),'tk_and':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,83,-70,-71,-72,-73,-74,-75,-77,83,83,83,83,83,-67,-68,83,-65,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,83,-50,83,-69,83,]),'tk_or':([49,50,54,55,56,57,58,59,60,61,62,63,64,70,85,86,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,121,123,139,],[-76,84,-70,-71,-72,-73,-74,-75,-77,84,84,84,84,84,-67,-68,84,-65,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,84,-69,84,]),'tk_twodot':([49,54,55,56,57,58,59,60,85,86,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,127,139,],[-76,-70,-71,-72,-73,-74,-75,-77,-67,-68,-65,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-50,-69,138,148,]),'res_int':([51,],[89,]),'res_char':([51,],[90,]),'res_string':([51,],[91,]),'res_double':([51,],[92,]),'res_boolean':([51,],[93,]),'tk_key_o':([69,97,98,99,145,149,],[101,118,119,120,150,153,]),'res_else':([133,],[145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,101,118,120,138,148,150,153,],[2,122,124,130,147,152,154,155,]),'instruction':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[3,27,3,3,3,27,27,27,3,27,3,3,27,3,27,27,]),'statement':([0,2,44,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[4,4,66,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,44,101,118,120,122,124,130,131,138,147,148,150,152,153,154,155,],[5,5,67,5,5,5,5,5,5,143,5,5,5,5,5,5,5,5,]),'print':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,101,118,120,122,124,130,131,138,147,148,150,152,153,154,155,],[7,7,7,7,7,7,7,7,142,7,7,7,7,7,7,7,7,]),'conditional':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'transfer':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'functions':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'con_if':([0,2,101,118,120,122,124,130,138,145,147,148,150,152,153,154,155,],[16,16,16,16,16,16,16,16,16,151,16,16,16,16,16,16,16,]),'con_switch':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'loop_while':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'loop_for':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'function_main':([0,2,101,118,120,122,124,130,138,147,148,150,152,153,154,155,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ptcommaP':([4,5,6,7,10,],[28,31,32,33,34,]),'empty':([4,5,6,7,10,36,],[30,30,30,30,30,48,]),'statementP':([36,],[46,]),'expression':([37,40,41,42,43,47,51,52,53,71,72,73,74,75,76,77,78,79,80,81,82,83,84,100,117,129,],[50,61,62,63,64,70,87,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,123,139,]),'for_init':([44,],[65,]),'type':([51,],[88,]),'default':([119,126,],[125,136,]),'list_case':([119,],[126,]),'case':([119,126,],[128,137,]),'for_advance':([131,],[141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',235),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',241),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',247),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',256),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',257),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',258),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',259),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',260),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',261),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',262),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',263),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',267),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',276),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',284),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',285),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',294),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',301),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',307),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',314),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',321),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',322),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',333),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',334),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',338),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',342),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',346),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',351),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',355),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',359),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',363),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',371),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',378),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',384),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',391),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',392),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',398),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',403),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',408),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',409),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',414),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',415),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',423),
  ('type -> res_int','type',1,'p_type','grammar.py',430),
  ('type -> res_char','type',1,'p_type','grammar.py',431),
  ('type -> res_string','type',1,'p_type','grammar.py',432),
  ('type -> res_double','type',1,'p_type','grammar.py',433),
  ('type -> res_boolean','type',1,'p_type','grammar.py',434),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',453),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',454),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',461),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',465),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',466),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',467),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',468),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',469),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',470),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',471),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',472),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',473),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',474),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',475),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',476),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',477),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',478),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',511),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',512),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',519),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',520),
  ('expression -> tk_par_o type tk_par_c expression','expression',4,'p_expression_unary_cast','grammar.py',528),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',534),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',539),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',543),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',547),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',551),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',552),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',556),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',560),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',566),
]
