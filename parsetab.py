
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusrighttk_fcastlefttk_inctk_decres_boolean res_break res_case res_char res_continue res_default res_double res_else res_false res_for res_func res_if res_int res_length res_main res_new res_null res_print res_read res_return res_round res_string res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functions\n                   | call_function ptcommaPinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_ccall_function : tk_id tk_par_o tk_par_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breaktransfer : res_return expressiontype : res_int\n            | res_char\n            | res_string\n            | res_double\n            | res_booleanptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_decexpression : tk_par_o type tk_par_c expression %prec tk_fcastexpression : call_function\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[13,13,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,13,-73,13,13,13,13,13,13,13,-19,-20,-27,-30,-31,13,-39,-32,13,13,13,-29,13,13,13,13,-28,-40,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,63,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[14,14,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,14,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,14,-73,14,14,14,14,14,14,14,-19,-20,-27,-30,-31,14,-39,-32,14,14,14,-29,14,14,14,14,-28,-40,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,128,129,130,131,133,135,136,137,142,143,144,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[15,15,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,40,-25,-26,-37,-38,-45,57,-18,59,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,57,-23,-24,57,-46,57,57,57,-74,-75,-76,-77,-78,-79,-80,-81,-82,57,57,57,103,-14,57,-16,-17,-21,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,57,57,15,-73,15,15,15,15,15,15,57,15,158,-19,-20,-27,-30,-31,15,-39,-32,15,15,15,-29,15,15,15,15,-28,-40,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[16,16,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,16,-73,16,16,16,16,16,16,16,-19,-20,-27,-30,-31,16,-39,-32,16,16,16,-29,16,16,16,16,-28,-40,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[21,21,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,21,-73,21,21,21,21,21,21,21,-19,-20,-27,-30,-31,21,-39,-32,21,21,21,-29,21,21,21,21,-28,-40,]),'res_return':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[22,22,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,22,-73,22,22,22,22,22,22,22,-19,-20,-27,-30,-31,22,-39,-32,22,22,22,-29,22,22,22,22,-28,-40,]),'res_func':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[24,24,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,24,-73,24,24,24,24,24,24,24,-19,-20,-27,-30,-31,24,-39,-32,24,24,24,-29,24,24,24,24,-28,-40,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,159,160,161,162,164,165,166,167,168,169,170,171,],[25,25,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,25,-73,25,25,25,25,25,25,25,-19,-20,-27,-30,-31,25,-39,25,-32,25,25,25,-29,25,25,25,25,-28,-40,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[26,26,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,26,-73,26,26,26,26,26,26,26,-19,-20,-27,-30,-31,26,-39,-32,26,26,26,-29,26,26,26,26,-28,-40,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[27,27,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,27,-73,27,27,27,27,27,27,27,-19,-20,-27,-30,-31,27,-39,-32,27,27,27,-29,27,27,27,27,-28,-40,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[28,28,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,28,-73,28,28,28,28,28,28,28,-19,-20,-27,-30,-31,28,-39,-32,28,28,28,-29,28,28,28,28,-28,-40,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,133,135,136,137,143,145,146,147,148,149,152,154,160,161,162,164,165,166,167,168,169,170,171,],[29,29,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,29,-73,29,29,29,29,29,29,29,-19,-20,-27,-30,-31,29,-39,-32,29,29,29,-29,29,29,29,29,-28,-40,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,145,146,147,148,149,154,160,165,170,171,],[0,-1,-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,-19,-20,-27,-30,-31,-39,-32,-29,-28,-40,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,135,136,137,138,139,141,143,145,146,147,148,149,150,151,154,160,161,165,166,168,169,170,171,],[-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,145,146,147,148,149,-34,154,-19,-20,-27,-30,-31,160,-33,-39,-32,-36,-29,-35,170,171,-28,-40,]),'res_default':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,132,139,141,145,146,147,148,149,151,154,160,165,166,170,171,],[-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,140,140,-34,-19,-20,-27,-30,-31,-33,-39,-32,-29,-35,-28,-40,]),'res_case':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,132,139,141,145,146,147,148,149,151,154,160,165,166,170,171,],[-3,-83,-83,-83,-83,-8,-9,-83,-11,-83,-25,-26,-37,-38,-45,-18,-2,-4,-52,-53,-5,-6,-7,-10,-12,-13,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,142,142,-34,-19,-20,-27,-30,-31,-33,-39,-32,-29,-35,-28,-40,]),'tk_dotcomma':([4,5,6,7,10,12,13,21,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,85,86,94,95,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,],[32,32,32,32,32,32,39,-45,-83,-23,-24,-46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-14,-16,-17,-21,-71,-72,-69,-70,127,-41,-42,-15,-22,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,144,]),'tk_assig':([15,40,103,158,],[41,66,41,41,]),'tk_inc':([15,46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,158,],[42,85,-74,-75,-76,-77,-78,-79,-80,-81,-82,85,-21,85,-71,-72,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-54,85,85,85,42,]),'tk_dec':([15,46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,158,],[43,86,-74,-75,-76,-77,-78,-79,-80,-81,-82,86,-21,86,-71,-72,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-54,86,86,86,43,]),'tk_par_o':([15,16,22,25,26,27,28,29,41,45,47,48,49,57,59,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[44,45,47,60,61,62,63,64,47,47,47,47,47,44,96,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'tk_sub':([22,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,129,134,142,153,],[48,48,48,72,48,48,48,-74,-75,-76,-77,-78,-79,-80,-81,-82,48,48,48,48,72,-21,72,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-71,-72,72,-69,72,72,72,72,72,-55,-56,-57,-58,-59,-60,72,72,72,72,72,72,72,72,-54,48,48,-73,72,48,72,]),'tk_not':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'tk_int':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'tk_decimal':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'tk_string':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'tk_char':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'res_true':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'res_false':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'res_null':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'tk_par_c':([42,43,44,50,51,52,53,54,55,56,57,58,64,68,69,70,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,155,156,157,],[-23,-24,69,-74,-75,-76,-77,-78,-79,-80,-81,-82,104,-17,-21,106,-71,-72,121,122,-47,-48,-49,-50,-51,-69,-70,123,124,125,126,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,163,-43,-44,]),'tk_add':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[71,-74,-75,-76,-77,-78,-79,-80,-81,-82,71,-21,71,-71,-72,71,-69,71,71,71,71,71,-55,-56,-57,-58,-59,-60,71,71,71,71,71,71,71,71,-54,-73,71,71,]),'tk_mult':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[73,-74,-75,-76,-77,-78,-79,-80,-81,-82,73,-21,73,-71,-72,73,-69,73,73,73,73,73,73,73,-57,-58,-59,-60,73,73,73,73,73,73,73,73,-54,-73,73,73,]),'tk_div':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[74,-74,-75,-76,-77,-78,-79,-80,-81,-82,74,-21,74,-71,-72,74,-69,74,74,74,74,74,74,74,-57,-58,-59,-60,74,74,74,74,74,74,74,74,-54,-73,74,74,]),'tk_module':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[75,-74,-75,-76,-77,-78,-79,-80,-81,-82,75,-21,75,-71,-72,75,-69,75,75,75,75,75,75,75,-57,-58,-59,-60,75,75,75,75,75,75,75,75,-54,-73,75,75,]),'tk_pow':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[76,-74,-75,-76,-77,-78,-79,-80,-81,-82,76,-21,76,-71,-72,76,-69,76,76,76,76,76,76,76,76,76,76,-60,76,76,76,76,76,76,76,76,-54,-73,76,76,]),'tk_equals':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[77,-74,-75,-76,-77,-78,-79,-80,-81,-82,77,-21,77,-71,-72,77,-69,77,77,77,77,77,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,77,77,-54,-73,77,77,]),'tk_different':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[78,-74,-75,-76,-77,-78,-79,-80,-81,-82,78,-21,78,-71,-72,78,-69,78,78,78,78,78,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,78,78,-54,-73,78,78,]),'tk_greater':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[79,-74,-75,-76,-77,-78,-79,-80,-81,-82,79,-21,79,-71,-72,79,-69,79,79,79,79,79,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,79,79,-54,-73,79,79,]),'tk_greater_equals':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[80,-74,-75,-76,-77,-78,-79,-80,-81,-82,80,-21,80,-71,-72,80,-69,80,80,80,80,80,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,80,80,-54,-73,80,80,]),'tk_less':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[81,-74,-75,-76,-77,-78,-79,-80,-81,-82,81,-21,81,-71,-72,81,-69,81,81,81,81,81,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,81,81,-54,-73,81,81,]),'tk_less_equals':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[82,-74,-75,-76,-77,-78,-79,-80,-81,-82,82,-21,82,-71,-72,82,-69,82,82,82,82,82,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,82,82,-54,-73,82,82,]),'tk_and':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[83,-74,-75,-76,-77,-78,-79,-80,-81,-82,83,-21,83,-71,-72,83,-69,-70,83,83,83,83,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,83,-54,-73,83,83,]),'tk_or':([46,50,51,52,53,54,55,56,57,58,68,69,70,85,86,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,134,153,],[84,-74,-75,-76,-77,-78,-79,-80,-81,-82,84,-21,84,-71,-72,84,-69,-70,84,84,84,84,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,84,84,]),'res_int':([47,],[89,]),'res_char':([47,],[90,]),'res_string':([47,],[91,]),'res_double':([47,],[92,]),'res_boolean':([47,],[93,]),'tk_twodot':([50,51,52,53,54,55,56,57,58,69,85,86,94,95,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,129,140,153,],[-74,-75,-76,-77,-78,-79,-80,-81,-82,-21,-71,-72,-69,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-54,-73,152,162,]),'tk_key_o':([104,123,124,125,126,159,163,],[128,130,131,132,133,164,167,]),'res_else':([147,],[159,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,128,130,131,133,152,162,164,167,],[2,135,136,137,143,161,166,168,169,]),'instruction':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[3,30,3,3,3,3,30,30,30,30,3,30,3,3,30,3,30,30,]),'statement':([0,2,63,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[4,4,101,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,63,128,130,131,133,135,136,137,143,144,152,161,162,164,166,167,168,169,],[5,5,102,5,5,5,5,5,5,5,5,157,5,5,5,5,5,5,5,5,]),'print':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,128,130,131,133,135,136,137,143,144,152,161,162,164,166,167,168,169,],[7,7,7,7,7,7,7,7,7,7,156,7,7,7,7,7,7,7,7,]),'conditional':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'transfer':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'functions':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'call_function':([0,2,22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,128,130,131,133,135,136,137,142,143,152,161,162,164,166,167,168,169,],[12,12,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,12,12,12,12,12,12,12,50,12,12,12,12,12,12,12,12,12,]),'con_if':([0,2,128,130,131,133,135,136,137,143,152,159,161,162,164,166,167,168,169,],[17,17,17,17,17,17,17,17,17,17,17,165,17,17,17,17,17,17,17,]),'con_switch':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'loop_while':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'loop_for':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'function_main':([0,2,128,130,131,133,135,136,137,143,152,161,162,164,166,167,168,169,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'ptcommaP':([4,5,6,7,10,12,],[31,34,35,36,37,38,]),'empty':([4,5,6,7,10,12,40,],[33,33,33,33,33,33,67,]),'expression':([22,41,45,47,48,49,60,61,62,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,127,142,],[46,68,70,87,94,95,97,98,99,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,129,134,153,]),'statementP':([40,],[65,]),'type':([47,],[88,]),'for_init':([63,],[100,]),'default':([132,139,],[138,150,]),'list_case':([132,],[139,]),'case':([132,139,],[141,151,]),'for_advance':([144,],[155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',239),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',245),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',251),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',260),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',261),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',262),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',263),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',264),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',265),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',266),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',267),
  ('instruction -> call_function ptcommaP','instruction',2,'p_instruction','grammar.py',268),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',272),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',281),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',289),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',290),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',299),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',306),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',312),
  ('functions -> res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_c','functions',7,'p_function_whitout_params','grammar.py',319),
  ('call_function -> tk_id tk_par_o tk_par_c','call_function',3,'p_call_function_whitout_params','grammar.py',327),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',334),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',341),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',342),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',353),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',354),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',358),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',362),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',366),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',371),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',375),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',379),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',383),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',391),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',398),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',404),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',411),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',412),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',418),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',423),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',428),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',429),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',434),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',435),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',443),
  ('transfer -> res_return expression','transfer',2,'p_transfer_return','grammar.py',448),
  ('type -> res_int','type',1,'p_type','grammar.py',456),
  ('type -> res_char','type',1,'p_type','grammar.py',457),
  ('type -> res_string','type',1,'p_type','grammar.py',458),
  ('type -> res_double','type',1,'p_type','grammar.py',459),
  ('type -> res_boolean','type',1,'p_type','grammar.py',460),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',479),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',480),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',487),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',491),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',492),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',493),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',494),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',495),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',496),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',497),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',498),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',499),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',500),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',501),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',502),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',503),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',504),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',537),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',538),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',545),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',546),
  ('expression -> tk_par_o type tk_par_c expression','expression',4,'p_expression_unary_cast','grammar.py',554),
  ('expression -> call_function','expression',1,'p_expression_call_function','grammar.py',560),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',566),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',571),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',575),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',579),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',583),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',584),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',588),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',592),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',598),
]
