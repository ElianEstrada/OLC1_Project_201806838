
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_addtk_sublefttk_multtk_divres_break res_case res_continue res_default res_else res_false res_for res_if res_length res_main res_new res_print res_read res_return res_round res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cptcommaP : tk_dotcomma\n                | emptyexpression : expression tk_add expression\n                  | expression tk_sub expression\n    expression :  tk_int\n    empty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,36,37,38,39,40,],[8,8,-3,-21,-21,-21,-7,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,8,-18,-19,8,-14,]),'res_var':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,36,37,38,39,40,],[9,9,-3,-21,-21,-21,-7,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,9,-18,-19,9,-14,]),'tk_id':([0,2,3,4,5,6,7,9,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,36,37,38,39,40,],[10,10,-3,-21,-21,-21,-7,21,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,10,-18,-19,10,-14,]),'res_print':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,36,37,38,39,40,],[11,11,-3,-21,-21,-21,-7,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,11,-18,-19,11,-14,]),'res_main':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,36,37,38,39,40,],[13,13,-3,-21,-21,-21,-7,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,13,-18,-19,13,-14,]),'$end':([1,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,37,38,40,],[0,-1,-3,-21,-21,-21,-7,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,-18,-19,-14,]),'tk_key_c':([3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,29,32,35,37,38,39,40,],[-3,-21,-21,-21,-7,-13,-2,-4,-16,-17,-5,-6,-8,-21,-9,-11,-12,-20,-10,-15,-18,-19,40,-14,]),'tk_dotcomma':([4,5,6,8,21,25,27,28,29,32,35,37,38,],[16,16,16,20,-21,-9,-11,-12,-20,-10,-15,-18,-19,]),'tk_assig':([10,21,],[22,26,]),'tk_par_o':([11,13,],[23,24,]),'tk_int':([22,23,26,33,34,],[29,29,29,29,29,]),'tk_par_c':([24,29,30,37,38,],[31,-20,35,-18,-19,]),'tk_add':([28,29,30,32,37,38,],[33,-20,33,33,-18,-19,]),'tk_sub':([28,29,30,32,37,38,],[34,-20,34,34,-18,-19,]),'tk_key_o':([31,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,36,],[2,39,]),'instruction':([0,2,36,39,],[3,14,3,14,]),'statement':([0,2,36,39,],[4,4,4,4,]),'assignment':([0,2,36,39,],[5,5,5,5,]),'print':([0,2,36,39,],[6,6,6,6,]),'functions':([0,2,36,39,],[7,7,7,7,]),'function_main':([0,2,36,39,],[12,12,12,12,]),'ptcommaP':([4,5,6,],[15,18,19,]),'empty':([4,5,6,21,],[17,17,17,27,]),'statementP':([21,],[25,]),'expression':([22,23,26,33,34,],[28,30,32,37,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',206),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',212),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',218),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',227),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',228),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',229),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',230),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',234),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',243),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',251),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',252),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',261),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',268),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',274),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',281),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',287),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',288),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',295),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',296),
  ('expression -> tk_int','expression',1,'p_expression_primitive','grammar.py',306),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',313),
]
