
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminuslefttk_inctk_decres_break res_case res_continue res_default res_else res_false res_for res_if res_length res_main res_new res_null res_print res_read res_return res_round res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_ifcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmentptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_dec\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,119,120,121,122,123,124,125,],[11,11,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,11,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,11,11,11,11,11,-17,-22,-27,11,-24,11,11,11,-23,-28,]),'res_var':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,38,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,119,120,121,122,123,124,125,],[12,12,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,12,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,12,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,12,12,12,12,12,-17,-22,-27,12,-24,12,12,12,-23,-28,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,12,15,16,17,18,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,119,120,121,122,123,124,125,],[13,13,-3,-62,-62,-62,-62,-8,-9,-10,31,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,43,-19,-20,43,43,43,61,-12,43,-14,-60,-15,43,43,43,-54,-55,-56,-57,-58,-59,-61,-13,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-52,-53,-50,-51,-18,43,13,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,13,13,13,13,13,116,-17,-22,-27,13,-24,13,13,13,-23,-28,]),'res_print':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,119,120,121,122,123,124,125,],[14,14,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,14,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,14,14,14,14,14,-17,-22,-27,14,-24,14,14,14,-23,-28,]),'res_if':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,117,119,120,121,122,123,124,125,],[19,19,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,19,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,19,19,19,19,19,-17,-22,-27,19,19,-24,19,19,19,-23,-28,]),'res_while':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,119,120,121,122,123,124,125,],[20,20,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,20,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,20,20,20,20,20,-17,-22,-27,20,-24,20,20,20,-23,-28,]),'res_for':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,119,120,121,122,123,124,125,],[21,21,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,21,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,21,21,21,21,21,-17,-22,-27,21,-24,21,21,21,-23,-28,]),'res_main':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,119,120,121,122,123,124,125,],[22,22,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,22,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,22,22,22,22,22,-17,-22,-27,22,-24,22,22,22,-23,-28,]),'$end':([1,2,3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,110,111,112,120,124,125,],[0,-1,-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,-17,-22,-27,-24,-23,-28,]),'tk_key_c':([3,4,5,6,7,8,9,10,15,16,17,18,23,24,25,26,27,28,29,30,31,33,34,40,42,43,44,48,49,50,51,52,53,54,63,78,79,81,82,83,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,107,108,110,111,112,120,122,123,124,125,],[-3,-62,-62,-62,-62,-8,-9,-10,-21,-25,-26,-16,-2,-4,-33,-34,-5,-6,-7,-11,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,-13,-52,-53,-50,-51,-18,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,110,111,112,-17,-22,-27,-24,124,125,-23,-28,]),'tk_dotcomma':([4,5,6,7,11,31,33,34,40,42,43,44,48,49,50,51,52,53,54,58,59,60,63,78,79,81,82,83,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[25,25,25,25,30,-62,-19,-20,-12,-14,-60,-15,-54,-55,-56,-57,-58,-59,-61,86,-29,-30,-13,-52,-53,-50,-51,-18,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,109,]),'tk_assig':([13,31,61,116,],[32,41,32,32,]),'tk_inc':([13,43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,116,],[33,-60,78,-54,-55,-56,-57,-58,-59,-61,78,78,78,78,-52,-53,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-35,78,33,]),'tk_dec':([13,43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,116,],[34,-60,79,-54,-55,-56,-57,-58,-59,-61,79,79,79,79,-52,-53,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-35,79,34,]),'tk_par_o':([14,19,20,21,22,32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[35,36,37,38,39,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'tk_sub':([32,35,36,37,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[46,46,46,46,46,-60,65,46,46,46,-54,-55,-56,-57,-58,-59,-61,65,65,65,65,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-52,-53,65,-50,65,46,-36,-37,-38,-39,-40,-41,65,65,65,65,65,65,65,65,-35,65,]),'tk_not':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'tk_int':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'tk_decimal':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'tk_string':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'tk_char':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'res_true':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'res_false':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'res_null':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'tk_par_c':([33,34,39,43,44,48,49,50,51,52,53,54,55,56,57,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,113,114,115,],[-19,-20,62,-60,-15,-54,-55,-56,-57,-58,-59,-61,83,84,85,-52,-53,102,-50,-51,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,118,-31,-32,]),'tk_add':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,64,-54,-55,-56,-57,-58,-59,-61,64,64,64,64,-52,-53,64,-50,64,-36,-37,-38,-39,-40,-41,64,64,64,64,64,64,64,64,-35,64,]),'tk_mult':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,66,-54,-55,-56,-57,-58,-59,-61,66,66,66,66,-52,-53,66,-50,66,66,66,-38,-39,-40,-41,66,66,66,66,66,66,66,66,-35,66,]),'tk_div':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,67,-54,-55,-56,-57,-58,-59,-61,67,67,67,67,-52,-53,67,-50,67,67,67,-38,-39,-40,-41,67,67,67,67,67,67,67,67,-35,67,]),'tk_module':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,68,-54,-55,-56,-57,-58,-59,-61,68,68,68,68,-52,-53,68,-50,68,68,68,-38,-39,-40,-41,68,68,68,68,68,68,68,68,-35,68,]),'tk_pow':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,69,-54,-55,-56,-57,-58,-59,-61,69,69,69,69,-52,-53,69,-50,69,69,69,69,69,69,-41,69,69,69,69,69,69,69,69,-35,69,]),'tk_equals':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,70,-54,-55,-56,-57,-58,-59,-61,70,70,70,70,-52,-53,70,-50,70,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,70,70,-35,70,]),'tk_different':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,71,-54,-55,-56,-57,-58,-59,-61,71,71,71,71,-52,-53,71,-50,71,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,71,71,-35,71,]),'tk_greater':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,72,-54,-55,-56,-57,-58,-59,-61,72,72,72,72,-52,-53,72,-50,72,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,72,72,-35,72,]),'tk_greater_equals':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,73,-54,-55,-56,-57,-58,-59,-61,73,73,73,73,-52,-53,73,-50,73,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,73,73,-35,73,]),'tk_less':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,74,-54,-55,-56,-57,-58,-59,-61,74,74,74,74,-52,-53,74,-50,74,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,74,74,-35,74,]),'tk_less_equals':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,75,-54,-55,-56,-57,-58,-59,-61,75,75,75,75,-52,-53,75,-50,75,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,75,75,-35,75,]),'tk_and':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,76,-54,-55,-56,-57,-58,-59,-61,76,76,76,76,-52,-53,76,-50,-51,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,76,-35,76,]),'tk_or':([43,44,48,49,50,51,52,53,54,55,56,57,63,78,79,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,],[-60,77,-54,-55,-56,-57,-58,-59,-61,77,77,77,77,-52,-53,77,-50,-51,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-35,77,]),'tk_key_o':([62,84,85,117,118,],[87,103,104,119,121,]),'res_else':([111,],[117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,87,103,104,119,121,],[2,106,107,108,122,123,]),'instruction':([0,2,87,103,104,106,107,108,119,121,122,123,],[3,23,3,3,3,23,23,23,3,3,23,23,]),'statement':([0,2,38,87,103,104,106,107,108,119,121,122,123,],[4,4,59,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,38,87,103,104,106,107,108,109,119,121,122,123,],[5,5,60,5,5,5,5,5,5,115,5,5,5,5,]),'print':([0,2,87,103,104,106,107,108,119,121,122,123,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,87,103,104,106,107,108,109,119,121,122,123,],[7,7,7,7,7,7,7,7,114,7,7,7,7,]),'conditional':([0,2,87,103,104,106,107,108,119,121,122,123,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,87,103,104,106,107,108,119,121,122,123,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'functions':([0,2,87,103,104,106,107,108,119,121,122,123,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'con_if':([0,2,87,103,104,106,107,108,117,119,121,122,123,],[15,15,15,15,15,15,15,15,120,15,15,15,15,]),'loop_while':([0,2,87,103,104,106,107,108,119,121,122,123,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'loop_for':([0,2,87,103,104,106,107,108,119,121,122,123,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'function_main':([0,2,87,103,104,106,107,108,119,121,122,123,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'ptcommaP':([4,5,6,7,],[24,27,28,29,]),'empty':([4,5,6,7,31,],[26,26,26,26,42,]),'statementP':([31,],[40,]),'expression':([32,35,36,37,41,45,46,47,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[44,55,56,57,63,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,]),'for_init':([38,],[58,]),'for_advance':([109,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',222),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',228),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',234),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',243),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',244),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',245),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',246),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',247),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',248),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',249),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',253),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',262),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',270),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',271),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',280),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',287),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',293),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',300),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',307),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',308),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',319),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',323),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',327),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',331),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',339),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',340),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',346),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',351),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',356),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',357),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',362),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',363),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',370),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',371),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',378),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',382),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',383),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',384),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',385),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',386),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',387),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',388),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',389),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',390),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',391),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',392),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',393),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',394),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',395),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',428),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',429),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',436),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',437),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',446),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',451),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',455),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',459),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',463),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',464),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',468),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',472),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',478),
]
