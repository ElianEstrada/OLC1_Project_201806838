
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminuslefttk_inctk_decres_break res_case res_continue res_default res_else res_false res_for res_if res_length res_main res_new res_null res_print res_read res_return res_round res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_ifcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifloops : loop_whileloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_dec\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,],[11,11,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,11,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,11,11,11,11,11,-17,-22,-26,11,-24,11,-23,]),'res_var':([0,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,],[12,12,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,12,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,12,12,12,12,12,-17,-22,-26,12,-24,12,-23,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,12,15,16,17,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,],[13,13,-3,-56,-56,-56,-56,-8,-9,-10,29,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,40,-19,-20,40,40,40,-12,40,-14,-54,-15,40,40,40,-48,-49,-50,-51,-52,-53,-55,-13,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-46,-47,-44,-45,-18,13,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,13,13,13,13,13,-17,-22,-26,13,-24,13,-23,]),'res_print':([0,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,],[14,14,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,14,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,14,14,14,14,14,-17,-22,-26,14,-24,14,-23,]),'res_if':([0,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,],[18,18,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,18,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,18,18,18,18,18,-17,-22,-26,18,18,-24,18,-23,]),'res_while':([0,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,],[19,19,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,19,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,19,19,19,19,19,-17,-22,-26,19,-24,19,-23,]),'res_main':([0,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,],[20,20,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,20,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,20,20,20,20,20,-17,-22,-26,20,-24,20,-23,]),'$end':([1,2,3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,100,101,102,105,107,],[0,-1,-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,-17,-22,-26,-24,-23,]),'tk_key_c':([3,4,5,6,7,8,9,10,15,16,17,21,22,23,24,25,26,27,28,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,99,100,101,102,105,106,107,],[-3,-56,-56,-56,-56,-8,-9,-10,-21,-25,-16,-2,-4,-27,-28,-5,-6,-7,-11,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,100,101,102,-17,-22,-26,-24,107,-23,]),'tk_dotcomma':([4,5,6,7,11,29,31,32,37,39,40,41,45,46,47,48,49,50,51,56,71,72,74,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[23,23,23,23,28,-56,-19,-20,-12,-14,-54,-15,-48,-49,-50,-51,-52,-53,-55,-13,-46,-47,-44,-45,-18,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,]),'tk_assig':([13,29,],[30,38,]),'tk_inc':([13,40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[31,-54,71,-48,-49,-50,-51,-52,-53,-55,71,71,71,71,-46,-47,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-29,]),'tk_dec':([13,40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[32,-54,72,-48,-49,-50,-51,-52,-53,-55,72,72,72,72,-46,-47,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-29,]),'tk_par_o':([14,18,19,20,30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[33,34,35,36,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'tk_sub':([30,33,34,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[43,43,43,43,43,-54,58,43,43,43,-48,-49,-50,-51,-52,-53,-55,58,58,58,58,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-46,-47,58,-44,58,-30,-31,-32,-33,-34,-35,58,58,58,58,58,58,58,58,-29,]),'tk_not':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'tk_int':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'tk_decimal':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'tk_string':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'tk_char':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'res_true':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'res_false':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'res_null':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'tk_par_c':([36,40,45,46,47,48,49,50,51,52,53,54,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[55,-54,-48,-49,-50,-51,-52,-53,-55,76,77,78,-46,-47,94,-44,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,]),'tk_add':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,57,-48,-49,-50,-51,-52,-53,-55,57,57,57,57,-46,-47,57,-44,57,-30,-31,-32,-33,-34,-35,57,57,57,57,57,57,57,57,-29,]),'tk_mult':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,59,-48,-49,-50,-51,-52,-53,-55,59,59,59,59,-46,-47,59,-44,59,59,59,-32,-33,-34,-35,59,59,59,59,59,59,59,59,-29,]),'tk_div':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,60,-48,-49,-50,-51,-52,-53,-55,60,60,60,60,-46,-47,60,-44,60,60,60,-32,-33,-34,-35,60,60,60,60,60,60,60,60,-29,]),'tk_module':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,61,-48,-49,-50,-51,-52,-53,-55,61,61,61,61,-46,-47,61,-44,61,61,61,-32,-33,-34,-35,61,61,61,61,61,61,61,61,-29,]),'tk_pow':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,62,-48,-49,-50,-51,-52,-53,-55,62,62,62,62,-46,-47,62,-44,62,62,62,62,62,62,-35,62,62,62,62,62,62,62,62,-29,]),'tk_equals':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,63,-48,-49,-50,-51,-52,-53,-55,63,63,63,63,-46,-47,63,-44,63,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,63,63,-29,]),'tk_different':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,64,-48,-49,-50,-51,-52,-53,-55,64,64,64,64,-46,-47,64,-44,64,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,64,64,-29,]),'tk_greater':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,65,-48,-49,-50,-51,-52,-53,-55,65,65,65,65,-46,-47,65,-44,65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,65,65,-29,]),'tk_greater_equals':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,66,-48,-49,-50,-51,-52,-53,-55,66,66,66,66,-46,-47,66,-44,66,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,66,66,-29,]),'tk_less':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,67,-48,-49,-50,-51,-52,-53,-55,67,67,67,67,-46,-47,67,-44,67,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,67,67,-29,]),'tk_less_equals':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,68,-48,-49,-50,-51,-52,-53,-55,68,68,68,68,-46,-47,68,-44,68,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,68,68,-29,]),'tk_and':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,69,-48,-49,-50,-51,-52,-53,-55,69,69,69,69,-46,-47,69,-44,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,69,-29,]),'tk_or':([40,41,45,46,47,48,49,50,51,52,53,54,56,71,72,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[-54,70,-48,-49,-50,-51,-52,-53,-55,70,70,70,70,-46,-47,70,-44,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-29,]),'tk_key_o':([55,77,78,103,],[79,95,96,104,]),'res_else':([101,],[103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,79,95,96,104,],[2,97,98,99,106,]),'instruction':([0,2,79,95,96,97,98,99,104,106,],[3,21,3,3,3,21,21,21,3,21,]),'statement':([0,2,79,95,96,97,98,99,104,106,],[4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,79,95,96,97,98,99,104,106,],[5,5,5,5,5,5,5,5,5,5,]),'print':([0,2,79,95,96,97,98,99,104,106,],[6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,79,95,96,97,98,99,104,106,],[7,7,7,7,7,7,7,7,7,7,]),'conditional':([0,2,79,95,96,97,98,99,104,106,],[8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,79,95,96,97,98,99,104,106,],[9,9,9,9,9,9,9,9,9,9,]),'functions':([0,2,79,95,96,97,98,99,104,106,],[10,10,10,10,10,10,10,10,10,10,]),'con_if':([0,2,79,95,96,97,98,99,103,104,106,],[15,15,15,15,15,15,15,15,105,15,15,]),'loop_while':([0,2,79,95,96,97,98,99,104,106,],[16,16,16,16,16,16,16,16,16,16,]),'function_main':([0,2,79,95,96,97,98,99,104,106,],[17,17,17,17,17,17,17,17,17,17,]),'ptcommaP':([4,5,6,7,],[22,25,26,27,]),'empty':([4,5,6,7,29,],[24,24,24,24,39,]),'statementP':([29,],[37,]),'expression':([30,33,34,35,38,42,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70,],[41,52,53,54,56,73,74,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',221),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',227),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',233),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',242),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',243),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',244),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',245),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',246),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',247),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',248),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',252),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',261),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',269),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',270),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',279),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',286),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',292),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',299),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',306),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',307),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',318),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',322),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',326),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',330),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',338),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',344),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',351),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',352),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',359),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',363),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',364),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',365),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',366),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',367),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',368),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',369),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',370),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',371),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',372),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',373),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',374),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',375),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',376),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',409),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',410),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',417),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',418),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',427),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',432),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',436),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',440),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',444),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',445),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',449),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',453),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',459),
]
