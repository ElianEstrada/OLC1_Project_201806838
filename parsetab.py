
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusrighttk_fcastlefttk_inctk_decres_boolean res_break res_case res_char res_continue res_default res_double res_else res_false res_for res_func res_if res_int res_main res_new res_null res_print res_read res_return res_string res_switch res_true res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | statement_array ptcommaP\n                   | assignment_array ptcommaP\n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functions\n                   | call_function ptcommaPinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptystatement_array : type list_brackets tk_id tk_assig res_new type list_expressionstatement_array : type list_brackets tk_id tk_assig values_arraystatement_array : type list_brackets tk_id tk_assig tk_idlist_brackets : list_brackets bracketslist_brackets : bracketsbrackets : tk_brackets_o tk_brackets_clist_expression : list_expression expression_bralist_expression : expression_braexpression_bra : tk_brackets_o expression tk_brackets_cvalues_array : tk_key_o list_values_array tk_key_clist_values_array : list_values_array tk_comma valueslist_values_array : valuesvalues : values_array\n              | expressionassignment : tk_id tk_assig expressionassignment_array : tk_id list_expression tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o list_params tk_par_c tk_key_o instructions tk_key_clist_params : list_params tk_comma paramslist_params : paramsparams : type tk_idparams : type list_brackets tk_idcall_function : tk_id tk_par_o tk_par_ccall_function : tk_id tk_par_o list_params_call tk_par_clist_params_call : list_params_call tk_comma params_calllist_params_call : params_callparams_call : expressionprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breaktransfer : res_continuetransfer : res_return expressiontype : res_int\n            | res_char\n            | res_string\n            | res_double\n            | res_booleanptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_decexpression : tk_par_o type tk_par_c expression %prec tk_fcastexpression : call_functionexpression : res_read tk_par_o tk_par_c\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : tk_id list_expressionexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[15,15,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,15,-21,-20,-100,15,15,15,15,15,15,15,15,-36,-19,-28,-37,15,-53,-56,-57,15,-65,-38,-58,15,15,15,-55,15,15,15,15,-54,-66,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,81,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[16,16,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,16,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,16,-21,-20,-100,16,16,16,16,16,16,16,16,-36,-19,-28,-37,16,-53,-56,-57,16,-65,-38,-58,16,16,16,-55,16,16,16,16,-54,-66,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,119,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,156,160,161,163,165,166,167,168,172,173,175,177,183,184,187,192,193,194,195,196,197,198,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[17,17,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,51,-51,-52,-63,-64,-71,-72,75,-35,77,-74,-75,-76,-77,-78,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,75,-49,-50,75,-26,75,94,-23,75,-73,75,75,75,-101,-103,-104,-105,-106,-107,-108,-109,-111,75,75,75,127,-16,75,-18,-33,75,-25,-43,-22,-24,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-98,-99,-96,-97,-110,-17,-34,-44,75,-27,163,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,75,-102,171,75,17,-21,-20,75,-100,17,186,17,17,17,17,17,17,75,17,212,-36,-19,-28,75,-37,17,-53,-56,-57,17,-65,-38,-58,17,17,17,-55,17,17,17,17,-54,-66,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[19,19,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,19,-21,-20,-100,19,19,19,19,19,19,19,19,-36,-19,-28,-37,19,-53,-56,-57,19,-65,-38,-58,19,19,19,-55,19,19,19,19,-54,-66,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[24,24,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,24,-21,-20,-100,24,24,24,24,24,24,24,24,-36,-19,-28,-37,24,-53,-56,-57,24,-65,-38,-58,24,24,24,-55,24,24,24,24,-54,-66,]),'res_continue':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[25,25,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,25,-21,-20,-100,25,25,25,25,25,25,25,25,-36,-19,-28,-37,25,-53,-56,-57,25,-65,-38,-58,25,25,25,-55,25,25,25,25,-54,-66,]),'res_return':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[26,26,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,26,-21,-20,-100,26,26,26,26,26,26,26,26,-36,-19,-28,-37,26,-53,-56,-57,26,-65,-38,-58,26,26,26,-55,26,26,26,26,-54,-66,]),'res_func':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[28,28,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,28,-21,-20,-100,28,28,28,28,28,28,28,28,-36,-19,-28,-37,28,-53,-56,-57,28,-65,-38,-58,28,28,28,-55,28,28,28,28,-54,-66,]),'res_int':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,64,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,120,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,164,165,167,168,170,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[29,29,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,29,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,29,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,29,-21,29,-20,-100,29,29,29,29,29,29,29,29,29,-36,-19,-28,-37,29,-53,-56,-57,29,-65,-38,-58,29,29,29,-55,29,29,29,29,-54,-66,]),'res_char':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,64,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,120,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,164,165,167,168,170,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[30,30,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,30,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,30,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,30,-21,30,-20,-100,30,30,30,30,30,30,30,30,30,-36,-19,-28,-37,30,-53,-56,-57,30,-65,-38,-58,30,30,30,-55,30,30,30,30,-54,-66,]),'res_string':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,64,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,120,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,164,165,167,168,170,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[31,31,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,31,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,31,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,31,-21,31,-20,-100,31,31,31,31,31,31,31,31,31,-36,-19,-28,-37,31,-53,-56,-57,31,-65,-38,-58,31,31,31,-55,31,31,31,31,-54,-66,]),'res_double':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,64,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,120,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,164,165,167,168,170,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[32,32,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,32,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,32,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,32,-21,32,-20,-100,32,32,32,32,32,32,32,32,32,-36,-19,-28,-37,32,-53,-56,-57,32,-65,-38,-58,32,32,32,-55,32,32,32,32,-54,-66,]),'res_boolean':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,64,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,120,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,164,165,167,168,170,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[33,33,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,33,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,33,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,33,-21,33,-20,-100,33,33,33,33,33,33,33,33,33,-36,-19,-28,-37,33,-53,-56,-57,33,-65,-38,-58,33,33,33,-55,33,33,33,33,-54,-66,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,215,216,217,218,220,221,222,223,224,225,226,227,],[34,34,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,34,-21,-20,-100,34,34,34,34,34,34,34,34,-36,-19,-28,-37,34,-53,-56,-57,34,-65,-38,34,-58,34,34,34,-55,34,34,34,34,-54,-66,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[35,35,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,35,-21,-20,-100,35,35,35,35,35,35,35,35,-36,-19,-28,-37,35,-53,-56,-57,35,-65,-38,-58,35,35,35,-55,35,35,35,35,-54,-66,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[36,36,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,36,-21,-20,-100,36,36,36,36,36,36,36,36,-36,-19,-28,-37,36,-53,-56,-57,36,-65,-38,-58,36,36,36,-55,36,36,36,36,-54,-66,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[37,37,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,37,-21,-20,-100,37,37,37,37,37,37,37,37,-36,-19,-28,-37,37,-53,-56,-57,37,-65,-38,-58,37,37,37,-55,37,37,37,37,-54,-66,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,161,163,165,167,168,173,175,177,183,184,187,193,195,196,197,199,200,201,202,203,206,208,214,216,217,218,220,221,222,223,224,225,226,227,],[38,38,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,38,-21,-20,-100,38,38,38,38,38,38,38,38,-36,-19,-28,-37,38,-53,-56,-57,38,-65,-38,-58,38,38,38,-55,38,38,38,38,-54,-66,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,163,165,167,195,196,197,199,201,202,203,208,214,216,221,226,227,],[0,-1,-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-21,-20,-100,-36,-19,-28,-37,-53,-56,-57,-65,-38,-58,-55,-54,-66,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,163,165,167,177,179,180,181,182,183,187,188,189,191,193,195,196,197,199,200,201,202,203,204,205,208,213,214,216,217,221,222,224,225,226,227,],[-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-21,-20,-100,195,197,-30,-31,-32,199,201,202,203,-60,208,-36,-19,-28,-37,214,-53,-56,-57,216,-59,-65,-29,-38,-58,-62,-55,-61,226,227,-54,-66,]),'res_default':([3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,163,165,167,174,189,191,195,196,197,199,201,202,203,205,208,214,216,221,222,226,227,],[-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-21,-20,-100,190,190,-60,-36,-19,-28,-37,-53,-56,-57,-59,-65,-38,-58,-55,-61,-54,-66,]),'res_case':([3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,27,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,163,165,167,174,189,191,195,196,197,199,201,202,203,205,208,214,216,221,222,226,227,],[-3,-112,-112,-112,-112,-112,-112,-10,-11,-112,-13,-112,-51,-52,-63,-64,-71,-72,-35,-2,-4,-79,-80,-5,-6,-7,-8,-9,-12,-14,-15,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-21,-20,-100,192,192,-60,-36,-19,-28,-37,-53,-56,-57,-59,-65,-38,-58,-55,-61,-54,-66,]),'tk_dotcomma':([4,5,6,7,8,9,12,14,15,24,25,51,54,55,57,63,67,69,70,71,72,73,74,75,76,83,85,86,88,89,112,113,116,117,119,124,125,126,129,130,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,163,165,167,176,196,197,],[41,41,41,41,41,41,41,41,50,-71,-72,-112,-49,-50,-26,-73,-101,-103,-104,-105,-106,-107,-108,-109,-111,-16,-18,-33,-25,-43,-98,-99,-96,-97,-110,160,-67,-68,-17,-34,-44,-27,-48,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-21,-20,-100,194,-19,-28,]),'tk_assig':([17,51,53,57,88,94,127,133,212,],[52,84,87,-26,-25,134,52,-27,52,]),'tk_inc':([17,57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,212,],[54,-26,112,-101,-103,-104,-105,-106,-107,-108,-109,-111,112,-25,-43,112,112,112,-98,-99,112,112,112,-110,112,112,112,112,112,-44,-27,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-81,-102,112,112,112,112,54,]),'tk_dec':([17,57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,212,],[55,-26,113,-101,-103,-104,-105,-106,-107,-108,-109,-111,113,-25,-43,113,113,113,-98,-99,113,113,113,-110,113,113,113,113,113,-44,-27,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-81,-102,113,113,113,113,55,]),'tk_par_o':([17,19,26,34,35,36,37,38,52,56,58,62,64,65,66,68,75,77,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[56,62,64,78,79,80,81,82,64,64,64,64,64,64,64,118,56,120,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'tk_brackets_o':([17,18,29,30,31,32,33,53,57,59,60,75,88,95,96,119,133,156,172,178,196,],[58,61,-74,-75,-76,-77,-78,58,-26,61,-23,58,-25,-22,-24,58,-27,61,61,58,58,]),'tk_sub':([26,52,56,57,58,62,63,64,65,66,67,69,70,71,72,73,74,75,76,78,79,80,84,86,87,88,89,92,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,121,122,123,129,130,131,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,160,166,167,176,182,192,198,207,],[65,65,65,-26,65,65,99,65,65,65,-101,-103,-104,-105,-106,-107,-108,-109,-111,65,65,65,65,99,65,-25,-43,99,99,99,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-98,-99,99,-96,99,-110,99,99,99,99,99,-44,65,-27,-82,-83,-84,-85,-86,-87,99,99,99,99,99,99,99,99,-81,65,-102,65,65,-100,99,99,65,65,99,]),'tk_not':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'res_read':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'tk_int':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'tk_decimal':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'tk_string':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'tk_char':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'res_true':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'res_false':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'res_null':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'tk_par_c':([29,30,31,32,33,54,55,56,57,67,69,70,71,72,73,74,75,76,82,86,88,89,90,91,92,97,112,113,114,115,116,117,118,119,120,121,122,123,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,154,155,162,167,171,185,186,209,210,211,],[-74,-75,-76,-77,-78,-49,-50,89,-26,-101,-103,-104,-105,-106,-107,-108,-109,-111,128,-33,-25,-43,131,-46,-47,135,-98,-99,150,151,-96,-97,152,-110,153,157,158,159,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,169,-40,-45,-100,-41,-39,-42,219,-69,-70,]),'tk_add':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,98,-101,-103,-104,-105,-106,-107,-108,-109,-111,98,-25,-43,98,98,98,-98,-99,98,-96,98,-110,98,98,98,98,98,-44,-27,-82,-83,-84,-85,-86,-87,98,98,98,98,98,98,98,98,-81,-102,-100,98,98,98,]),'tk_mult':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,100,-101,-103,-104,-105,-106,-107,-108,-109,-111,100,-25,-43,100,100,100,-98,-99,100,-96,100,-110,100,100,100,100,100,-44,-27,100,100,-84,-85,-86,-87,100,100,100,100,100,100,100,100,-81,-102,-100,100,100,100,]),'tk_div':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,101,-101,-103,-104,-105,-106,-107,-108,-109,-111,101,-25,-43,101,101,101,-98,-99,101,-96,101,-110,101,101,101,101,101,-44,-27,101,101,-84,-85,-86,-87,101,101,101,101,101,101,101,101,-81,-102,-100,101,101,101,]),'tk_module':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,102,-101,-103,-104,-105,-106,-107,-108,-109,-111,102,-25,-43,102,102,102,-98,-99,102,-96,102,-110,102,102,102,102,102,-44,-27,102,102,-84,-85,-86,-87,102,102,102,102,102,102,102,102,-81,-102,-100,102,102,102,]),'tk_pow':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,103,-101,-103,-104,-105,-106,-107,-108,-109,-111,103,-25,-43,103,103,103,-98,-99,103,-96,103,-110,103,103,103,103,103,-44,-27,103,103,103,103,103,-87,103,103,103,103,103,103,103,103,-81,-102,-100,103,103,103,]),'tk_equals':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,104,-101,-103,-104,-105,-106,-107,-108,-109,-111,104,-25,-43,104,104,104,-98,-99,104,-96,104,-110,104,104,104,104,104,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,104,104,-81,-102,-100,104,104,104,]),'tk_different':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,105,-101,-103,-104,-105,-106,-107,-108,-109,-111,105,-25,-43,105,105,105,-98,-99,105,-96,105,-110,105,105,105,105,105,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,105,105,-81,-102,-100,105,105,105,]),'tk_greater':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,106,-101,-103,-104,-105,-106,-107,-108,-109,-111,106,-25,-43,106,106,106,-98,-99,106,-96,106,-110,106,106,106,106,106,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,106,106,-81,-102,-100,106,106,106,]),'tk_greater_equals':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,107,-101,-103,-104,-105,-106,-107,-108,-109,-111,107,-25,-43,107,107,107,-98,-99,107,-96,107,-110,107,107,107,107,107,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,107,107,-81,-102,-100,107,107,107,]),'tk_less':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,108,-101,-103,-104,-105,-106,-107,-108,-109,-111,108,-25,-43,108,108,108,-98,-99,108,-96,108,-110,108,108,108,108,108,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,108,108,-81,-102,-100,108,108,108,]),'tk_less_equals':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,109,-101,-103,-104,-105,-106,-107,-108,-109,-111,109,-25,-43,109,109,109,-98,-99,109,-96,109,-110,109,109,109,109,109,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,109,109,-81,-102,-100,109,109,109,]),'tk_and':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,110,-101,-103,-104,-105,-106,-107,-108,-109,-111,110,-25,-43,110,110,110,-98,-99,110,-96,-97,-110,110,110,110,110,110,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,110,-81,-102,-100,110,110,110,]),'tk_or':([57,63,67,69,70,71,72,73,74,75,76,86,88,89,92,93,97,112,113,114,116,117,119,121,122,123,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,176,182,207,],[-26,111,-101,-103,-104,-105,-106,-107,-108,-109,-111,111,-25,-43,111,111,111,-98,-99,111,-96,-97,-110,111,111,111,111,111,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-100,111,111,111,]),'tk_comma':([57,67,69,70,71,72,73,74,75,76,88,89,90,91,92,112,113,116,117,119,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,154,155,162,167,171,179,180,181,182,185,186,197,213,],[-26,-101,-103,-104,-105,-106,-107,-108,-109,-111,-25,-43,132,-46,-47,-98,-99,-96,-97,-110,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,170,-40,-45,-100,-41,198,-30,-31,-32,-39,-42,-28,-29,]),'tk_brackets_c':([57,61,67,69,70,71,72,73,74,75,76,88,89,93,112,113,116,117,119,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,],[-26,96,-101,-103,-104,-105,-106,-107,-108,-109,-111,-25,-43,133,-98,-99,-96,-97,-110,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-100,]),'tk_twodot':([57,67,69,70,71,72,73,74,75,76,88,89,112,113,116,117,119,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,167,190,207,],[-26,-101,-103,-104,-105,-106,-107,-108,-109,-111,-25,-43,-98,-99,-96,-97,-110,-44,-27,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-102,-100,206,218,]),'tk_key_o':([128,134,153,157,158,159,166,169,198,215,219,],[161,166,168,173,174,175,166,184,166,220,223,]),'res_new':([134,],[164,]),'res_else':([201,],[215,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,161,168,173,175,184,206,218,220,223,],[2,177,183,187,193,200,217,222,224,225,]),'instruction':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[3,39,3,3,3,3,39,39,3,39,39,39,3,39,3,3,39,3,39,39,]),'statement':([0,2,81,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[4,4,125,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,81,161,168,173,175,177,183,184,187,193,194,200,206,217,218,220,222,223,224,225,],[5,5,126,5,5,5,5,5,5,5,5,5,211,5,5,5,5,5,5,5,5,5,]),'statement_array':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignment_array':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'print':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'inc_dec':([0,2,161,168,173,175,177,183,184,187,193,194,200,206,217,218,220,222,223,224,225,],[9,9,9,9,9,9,9,9,9,9,9,210,9,9,9,9,9,9,9,9,9,]),'conditional':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'loops':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'transfer':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'functions':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'call_function':([0,2,26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,161,166,168,173,175,177,183,184,187,192,193,198,200,206,217,218,220,222,223,224,225,],[14,14,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,14,67,14,14,14,14,14,14,14,67,14,67,14,14,14,14,14,14,14,14,14,]),'type':([0,2,64,120,161,164,168,170,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[18,18,115,156,18,178,18,156,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'con_if':([0,2,161,168,173,175,177,183,184,187,193,200,206,215,217,218,220,222,223,224,225,],[20,20,20,20,20,20,20,20,20,20,20,20,20,221,20,20,20,20,20,20,20,]),'con_switch':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'loop_while':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'loop_for':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'function_main':([0,2,161,168,173,175,177,183,184,187,193,200,206,217,218,220,222,223,224,225,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ptcommaP':([4,5,6,7,8,9,12,14,],[40,43,44,45,46,47,48,49,]),'empty':([4,5,6,7,8,9,12,14,51,],[42,42,42,42,42,42,42,42,85,]),'list_expression':([17,75,178,],[53,119,196,]),'expression_bra':([17,53,75,119,178,196,],[57,88,57,88,57,88,]),'list_brackets':([18,156,],[59,172,]),'brackets':([18,59,156,172,],[60,95,60,95,]),'expression':([26,52,56,58,62,64,65,66,78,79,80,84,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,132,151,160,166,192,198,],[63,86,92,93,97,114,116,117,121,122,123,129,130,136,137,138,139,140,141,142,143,144,145,146,147,148,149,92,167,176,182,207,182,]),'statementP':([51,],[83,]),'list_params_call':([56,],[90,]),'params_call':([56,132,],[91,162,]),'for_init':([81,],[124,]),'list_params':([120,],[154,]),'params':([120,170,],[155,185,]),'values_array':([134,166,198,],[165,181,181,]),'list_values_array':([166,],[179,]),'values':([166,198,],[180,213,]),'default':([174,189,],[188,204,]),'list_case':([174,],[189,]),'case':([174,189,],[191,205,]),'for_advance':([194,],[209,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',237),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',243),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',249),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',258),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',259),
  ('instruction -> statement_array ptcommaP','instruction',2,'p_instruction','grammar.py',260),
  ('instruction -> assignment_array ptcommaP','instruction',2,'p_instruction','grammar.py',261),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',262),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',263),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',264),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',265),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',266),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',267),
  ('instruction -> call_function ptcommaP','instruction',2,'p_instruction','grammar.py',268),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',272),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',281),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',289),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',290),
  ('statement_array -> type list_brackets tk_id tk_assig res_new type list_expression','statement_array',7,'p_statement_array','grammar.py',300),
  ('statement_array -> type list_brackets tk_id tk_assig values_array','statement_array',5,'p_statement_array_keys','grammar.py',306),
  ('statement_array -> type list_brackets tk_id tk_assig tk_id','statement_array',5,'p_statement_array_array','grammar.py',311),
  ('list_brackets -> list_brackets brackets','list_brackets',2,'p_statement_array_list_brackets','grammar.py',317),
  ('list_brackets -> brackets','list_brackets',1,'p_statement_array_list_brackets_brackets','grammar.py',322),
  ('brackets -> tk_brackets_o tk_brackets_c','brackets',2,'p_statement_array_brackets','grammar.py',326),
  ('list_expression -> list_expression expression_bra','list_expression',2,'p_statement_array_list_expression','grammar.py',330),
  ('list_expression -> expression_bra','list_expression',1,'p_statement_array_list_expression_expression','grammar.py',335),
  ('expression_bra -> tk_brackets_o expression tk_brackets_c','expression_bra',3,'p_statement_array_expression','grammar.py',339),
  ('values_array -> tk_key_o list_values_array tk_key_c','values_array',3,'p_values_array','grammar.py',344),
  ('list_values_array -> list_values_array tk_comma values','list_values_array',3,'p_list_values_array','grammar.py',349),
  ('list_values_array -> values','list_values_array',1,'p_list_values_array_value','grammar.py',354),
  ('values -> values_array','values',1,'p_value','grammar.py',359),
  ('values -> expression','values',1,'p_value','grammar.py',360),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',368),
  ('assignment_array -> tk_id list_expression tk_assig expression','assignment_array',4,'p_assignment_array','grammar.py',372),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',385),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',391),
  ('functions -> res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_c','functions',7,'p_function_whitout_params','grammar.py',398),
  ('functions -> res_func tk_id tk_par_o list_params tk_par_c tk_key_o instructions tk_key_c','functions',8,'p_function_whit_params','grammar.py',404),
  ('list_params -> list_params tk_comma params','list_params',3,'p_list_params_functions','grammar.py',412),
  ('list_params -> params','list_params',1,'p_list_params_params_funcion','grammar.py',420),
  ('params -> type tk_id','params',2,'p_params_of_function','grammar.py',425),
  ('params -> type list_brackets tk_id','params',3,'p_params_of_functions_arrya','grammar.py',430),
  ('call_function -> tk_id tk_par_o tk_par_c','call_function',3,'p_call_function_whitout_params','grammar.py',439),
  ('call_function -> tk_id tk_par_o list_params_call tk_par_c','call_function',4,'p_call_function_whit_params','grammar.py',444),
  ('list_params_call -> list_params_call tk_comma params_call','list_params_call',3,'p_list_params_call','grammar.py',452),
  ('list_params_call -> params_call','list_params_call',1,'p_list_params_call_param','grammar.py',457),
  ('params_call -> expression','params_call',1,'p_params_call','grammar.py',462),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',470),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',477),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',478),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',489),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',490),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',494),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',498),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',502),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',507),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',511),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',515),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',519),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',527),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',534),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',540),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',547),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',548),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',554),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',559),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',564),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',565),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',570),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',571),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',579),
  ('transfer -> res_continue','transfer',1,'p_transfer_continue','grammar.py',584),
  ('transfer -> res_return expression','transfer',2,'p_transfer_return','grammar.py',589),
  ('type -> res_int','type',1,'p_type','grammar.py',597),
  ('type -> res_char','type',1,'p_type','grammar.py',598),
  ('type -> res_string','type',1,'p_type','grammar.py',599),
  ('type -> res_double','type',1,'p_type','grammar.py',600),
  ('type -> res_boolean','type',1,'p_type','grammar.py',601),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',620),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',621),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',628),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',632),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',633),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',634),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',635),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',636),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',637),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',638),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',639),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',640),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',641),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',642),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',643),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',644),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',645),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',678),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',679),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',686),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',687),
  ('expression -> tk_par_o type tk_par_c expression','expression',4,'p_expression_unary_cast','grammar.py',695),
  ('expression -> call_function','expression',1,'p_expression_call_function','grammar.py',701),
  ('expression -> res_read tk_par_o tk_par_c','expression',3,'p_expression_read','grammar.py',705),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',711),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',716),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',720),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',724),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',728),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',729),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',733),
  ('expression -> tk_id list_expression','expression',2,'p_expression_primitive_array','grammar.py',737),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',742),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',748),
]
