
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusres_break res_case res_continue res_default res_else res_false res_for res_if res_length res_main res_new res_null res_print res_read res_return res_round res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unot\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[8,8,-3,-42,-42,-42,-7,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,8,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,8,-14,]),'res_var':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[9,9,-3,-42,-42,-42,-7,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,9,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,9,-14,]),'tk_id':([0,2,3,4,5,6,7,9,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[10,10,-3,-42,-42,-42,-7,21,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,10,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,10,-14,]),'res_print':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[11,11,-3,-42,-42,-42,-7,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,11,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,11,-14,]),'res_main':([0,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[13,13,-3,-42,-42,-42,-7,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,13,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,13,-14,]),'$end':([1,2,3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,],[0,-1,-3,-42,-42,-42,-7,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,-14,]),'tk_key_c':([3,4,5,6,7,12,14,15,16,17,18,19,20,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-3,-42,-42,-42,-7,-13,-2,-4,-16,-17,-5,-6,-8,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,77,-14,]),'tk_dotcomma':([4,5,6,8,21,25,27,28,32,33,34,35,36,37,38,41,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[16,16,16,20,-42,-9,-11,-12,-35,-36,-37,-38,-39,-40,-41,-10,-33,-34,-15,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,]),'tk_assig':([10,21,],[22,26,]),'tk_par_o':([11,13,22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[23,24,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'tk_sub':([22,23,26,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[30,30,30,43,30,30,30,-35,-36,-37,-38,-39,-40,-41,43,43,30,30,30,30,30,30,30,30,30,30,30,30,30,30,43,-33,43,-19,-20,-21,-22,-23,-24,43,43,43,43,43,43,43,43,-18,]),'tk_not':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'tk_int':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'tk_decimal':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'tk_string':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'tk_char':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'res_true':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'res_false':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'res_null':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'tk_par_c':([24,32,33,34,35,36,37,38,39,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[40,-35,-36,-37,-38,-39,-40,-41,59,75,-33,-34,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,]),'tk_add':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[42,-35,-36,-37,-38,-39,-40,-41,42,42,42,-33,42,-19,-20,-21,-22,-23,-24,42,42,42,42,42,42,42,42,-18,]),'tk_mult':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[44,-35,-36,-37,-38,-39,-40,-41,44,44,44,-33,44,44,44,-21,-22,-23,-24,44,44,44,44,44,44,44,44,-18,]),'tk_div':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[45,-35,-36,-37,-38,-39,-40,-41,45,45,45,-33,45,45,45,-21,-22,-23,-24,45,45,45,45,45,45,45,45,-18,]),'tk_module':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[46,-35,-36,-37,-38,-39,-40,-41,46,46,46,-33,46,46,46,-21,-22,-23,-24,46,46,46,46,46,46,46,46,-18,]),'tk_pow':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[47,-35,-36,-37,-38,-39,-40,-41,47,47,47,-33,47,47,47,47,47,47,-24,47,47,47,47,47,47,47,47,-18,]),'tk_equals':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[48,-35,-36,-37,-38,-39,-40,-41,48,48,48,-33,48,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,48,48,-18,]),'tk_different':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[49,-35,-36,-37,-38,-39,-40,-41,49,49,49,-33,49,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,49,49,-18,]),'tk_greater':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[50,-35,-36,-37,-38,-39,-40,-41,50,50,50,-33,50,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,50,50,-18,]),'tk_greater_equals':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[51,-35,-36,-37,-38,-39,-40,-41,51,51,51,-33,51,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,51,51,-18,]),'tk_less':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[52,-35,-36,-37,-38,-39,-40,-41,52,52,52,-33,52,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,52,52,-18,]),'tk_less_equals':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[53,-35,-36,-37,-38,-39,-40,-41,53,53,53,-33,53,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,53,53,-18,]),'tk_and':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[54,-35,-36,-37,-38,-39,-40,-41,54,54,54,-33,-34,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,54,-18,]),'tk_or':([28,32,33,34,35,36,37,38,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[55,-35,-36,-37,-38,-39,-40,-41,55,55,55,-33,-34,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-18,]),'tk_key_o':([40,],[60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,60,],[2,76,]),'instruction':([0,2,60,76,],[3,14,3,14,]),'statement':([0,2,60,76,],[4,4,4,4,]),'assignment':([0,2,60,76,],[5,5,5,5,]),'print':([0,2,60,76,],[6,6,6,6,]),'functions':([0,2,60,76,],[7,7,7,7,]),'function_main':([0,2,60,76,],[12,12,12,12,]),'ptcommaP':([4,5,6,],[15,18,19,]),'empty':([4,5,6,21,],[17,17,17,27,]),'statementP':([21,],[25,]),'expression':([22,23,26,29,30,31,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[28,39,41,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',216),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',222),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',228),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',237),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',238),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',239),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',240),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',244),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',253),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',261),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',262),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',271),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',278),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',284),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',291),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',297),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',298),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',305),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',309),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',310),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',311),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',312),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',313),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',314),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',315),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',316),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',317),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',318),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',319),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',320),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',321),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',322),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',355),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',356),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',364),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',369),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',373),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',377),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',381),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',382),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',386),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',392),
]
