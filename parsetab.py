
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusrighttk_fcastlefttk_inctk_decres_boolean res_break res_case res_char res_continue res_default res_double res_else res_false res_for res_func res_if res_int res_length res_main res_new res_null res_print res_read res_return res_round res_string res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functions\n                   | call_function ptcommaPinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o list_params tk_par_c tk_key_o instructions tk_key_clist_params : list_params tk_comma paramslist_params : paramsparams : type tk_idcall_function : tk_id tk_par_o tk_par_ccall_function : tk_id tk_par_o list_params_call tk_par_clist_params_call : list_params_call tk_comma params_calllist_params_call : params_callparams_call : expressionprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breaktransfer : res_return expressiontype : res_int\n            | res_char\n            | res_string\n            | res_double\n            | res_booleanptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_decexpression : tk_par_o type tk_par_c expression %prec tk_fcastexpression : call_function\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[13,13,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,13,-81,13,13,13,13,13,13,13,13,-19,-20,13,-35,-38,-39,13,-47,-21,-40,13,13,13,-37,13,13,13,13,-36,-48,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,63,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[14,14,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,14,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,14,-81,14,14,14,14,14,14,14,14,-19,-20,14,-35,-38,-39,14,-47,-21,-40,14,14,14,-37,14,14,14,14,-36,-48,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,65,66,67,68,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,94,95,96,97,98,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,131,135,136,138,139,143,145,147,148,149,151,156,157,158,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[15,15,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,40,-33,-34,-45,-46,-53,57,-18,59,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,57,-31,-32,57,57,-54,57,57,57,-82,-83,-84,-85,-86,-87,-88,-89,-90,57,57,57,106,-14,57,-16,-17,-25,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-79,-80,-55,-56,-57,-58,-59,-77,-78,-15,-26,57,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,57,142,57,15,-81,15,15,15,15,15,15,15,57,15,173,-19,-20,15,-35,-38,-39,15,-47,-21,-40,15,15,15,-37,15,15,15,15,-36,-48,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[16,16,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,16,-81,16,16,16,16,16,16,16,16,-19,-20,16,-35,-38,-39,16,-47,-21,-40,16,16,16,-37,16,16,16,16,-36,-48,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[21,21,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,21,-81,21,21,21,21,21,21,21,21,-19,-20,21,-35,-38,-39,21,-47,-21,-40,21,21,21,-37,21,21,21,21,-36,-48,]),'res_return':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[22,22,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,22,-81,22,22,22,22,22,22,22,22,-19,-20,22,-35,-38,-39,22,-47,-21,-40,22,22,22,-37,22,22,22,22,-36,-48,]),'res_func':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[24,24,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,24,-81,24,24,24,24,24,24,24,24,-19,-20,24,-35,-38,-39,24,-47,-21,-40,24,24,24,-37,24,24,24,24,-36,-48,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,175,176,177,178,180,181,182,183,184,185,186,187,],[25,25,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,25,-81,25,25,25,25,25,25,25,25,-19,-20,25,-35,-38,-39,25,-47,-21,25,-40,25,25,25,-37,25,25,25,25,-36,-48,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[26,26,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,26,-81,26,26,26,26,26,26,26,26,-19,-20,26,-35,-38,-39,26,-47,-21,-40,26,26,26,-37,26,26,26,26,-36,-48,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[27,27,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,27,-81,27,27,27,27,27,27,27,27,-19,-20,27,-35,-38,-39,27,-47,-21,-40,27,27,27,-37,27,27,27,27,-36,-48,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[28,28,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,28,-81,28,28,28,28,28,28,28,28,-19,-20,28,-35,-38,-39,28,-47,-21,-40,28,28,28,-37,28,28,28,28,-36,-48,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,136,138,139,143,145,147,148,149,151,157,159,160,161,162,163,164,167,169,174,176,177,178,180,181,182,183,184,185,186,187,],[29,29,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,29,-81,29,29,29,29,29,29,29,29,-19,-20,29,-35,-38,-39,29,-47,-21,-40,29,29,29,-37,29,29,29,29,-36,-48,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,159,160,162,163,164,169,174,176,181,186,187,],[0,-1,-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,-19,-20,-35,-38,-39,-47,-21,-40,-37,-36,-48,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,147,148,151,152,153,155,157,159,160,161,162,163,164,165,166,169,174,176,177,181,182,184,185,186,187,],[-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,159,160,162,163,164,-42,169,-19,-20,174,-35,-38,-39,176,-41,-47,-21,-40,-44,-37,-43,186,187,-36,-48,]),'res_default':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,144,153,155,159,160,162,163,164,166,169,174,176,181,182,186,187,],[-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,154,154,-42,-19,-20,-35,-38,-39,-41,-47,-21,-40,-37,-43,-36,-48,]),'res_case':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,23,30,31,32,33,34,35,36,37,38,39,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,144,153,155,159,160,162,163,164,166,169,174,176,181,182,186,187,],[-3,-91,-91,-91,-91,-8,-9,-91,-11,-91,-33,-34,-45,-46,-53,-18,-2,-4,-60,-61,-5,-6,-7,-10,-12,-13,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,156,156,-42,-19,-20,-35,-38,-39,-41,-47,-21,-40,-37,-43,-36,-48,]),'tk_dotcomma':([4,5,6,7,10,12,13,21,40,42,43,46,50,51,52,53,54,55,56,57,58,65,67,68,69,88,89,97,98,103,104,105,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,],[32,32,32,32,32,32,39,-53,-91,-31,-32,-54,-82,-83,-84,-85,-86,-87,-88,-89,-90,-14,-16,-17,-25,-79,-80,-77,-78,135,-49,-50,-15,-26,-30,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,158,]),'tk_assig':([15,40,106,173,],[41,66,41,41,]),'tk_inc':([15,46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,173,],[42,88,-82,-83,-84,-85,-86,-87,-88,-89,-90,88,-25,88,88,-79,-80,88,88,88,88,88,88,88,-26,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-62,88,88,88,42,]),'tk_dec':([15,46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,173,],[43,89,-82,-83,-84,-85,-86,-87,-88,-89,-90,89,-25,89,89,-79,-80,89,89,89,89,89,89,89,-26,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-62,89,89,89,43,]),'tk_par_o':([15,16,22,25,26,27,28,29,41,44,45,47,48,49,57,59,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[44,45,47,60,61,62,63,64,47,47,47,47,47,47,44,99,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'tk_sub':([22,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,66,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,100,101,102,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,138,146,156,168,],[48,48,48,48,75,48,48,48,-82,-83,-84,-85,-86,-87,-88,-89,-90,48,48,48,48,75,-25,75,75,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-79,-80,75,-77,75,75,75,75,75,-26,48,-63,-64,-65,-66,-67,-68,75,75,75,75,75,75,75,75,-62,48,48,-81,75,48,75,]),'tk_not':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'tk_int':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'tk_decimal':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'tk_string':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'tk_char':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'res_true':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'res_false':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'res_null':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'tk_par_c':([42,43,44,50,51,52,53,54,55,56,57,58,64,68,69,70,71,72,73,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,137,138,142,150,170,171,172,],[-31,-32,69,-82,-83,-84,-85,-86,-87,-88,-89,-90,107,-17,-25,109,-28,-29,111,-79,-80,126,127,-55,-56,-57,-58,-59,-77,-78,128,132,133,134,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,140,-23,-27,-81,-24,-22,179,-51,-52,]),'tk_add':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[74,-82,-83,-84,-85,-86,-87,-88,-89,-90,74,-25,74,74,-79,-80,74,-77,74,74,74,74,74,-26,-63,-64,-65,-66,-67,-68,74,74,74,74,74,74,74,74,-62,-81,74,74,]),'tk_mult':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[76,-82,-83,-84,-85,-86,-87,-88,-89,-90,76,-25,76,76,-79,-80,76,-77,76,76,76,76,76,-26,76,76,-65,-66,-67,-68,76,76,76,76,76,76,76,76,-62,-81,76,76,]),'tk_div':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[77,-82,-83,-84,-85,-86,-87,-88,-89,-90,77,-25,77,77,-79,-80,77,-77,77,77,77,77,77,-26,77,77,-65,-66,-67,-68,77,77,77,77,77,77,77,77,-62,-81,77,77,]),'tk_module':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[78,-82,-83,-84,-85,-86,-87,-88,-89,-90,78,-25,78,78,-79,-80,78,-77,78,78,78,78,78,-26,78,78,-65,-66,-67,-68,78,78,78,78,78,78,78,78,-62,-81,78,78,]),'tk_pow':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[79,-82,-83,-84,-85,-86,-87,-88,-89,-90,79,-25,79,79,-79,-80,79,-77,79,79,79,79,79,-26,79,79,79,79,79,-68,79,79,79,79,79,79,79,79,-62,-81,79,79,]),'tk_equals':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[80,-82,-83,-84,-85,-86,-87,-88,-89,-90,80,-25,80,80,-79,-80,80,-77,80,80,80,80,80,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,80,80,-62,-81,80,80,]),'tk_different':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[81,-82,-83,-84,-85,-86,-87,-88,-89,-90,81,-25,81,81,-79,-80,81,-77,81,81,81,81,81,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,81,81,-62,-81,81,81,]),'tk_greater':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[82,-82,-83,-84,-85,-86,-87,-88,-89,-90,82,-25,82,82,-79,-80,82,-77,82,82,82,82,82,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,82,82,-62,-81,82,82,]),'tk_greater_equals':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[83,-82,-83,-84,-85,-86,-87,-88,-89,-90,83,-25,83,83,-79,-80,83,-77,83,83,83,83,83,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,83,83,-62,-81,83,83,]),'tk_less':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[84,-82,-83,-84,-85,-86,-87,-88,-89,-90,84,-25,84,84,-79,-80,84,-77,84,84,84,84,84,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,84,84,-62,-81,84,84,]),'tk_less_equals':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[85,-82,-83,-84,-85,-86,-87,-88,-89,-90,85,-25,85,85,-79,-80,85,-77,85,85,85,85,85,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,85,85,-62,-81,85,85,]),'tk_and':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[86,-82,-83,-84,-85,-86,-87,-88,-89,-90,86,-25,86,86,-79,-80,86,-77,-78,86,86,86,86,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,86,-62,-81,86,86,]),'tk_or':([46,50,51,52,53,54,55,56,57,58,68,69,72,73,88,89,90,97,98,100,101,102,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,146,168,],[87,-82,-83,-84,-85,-86,-87,-88,-89,-90,87,-25,87,87,-79,-80,87,-77,-78,87,87,87,87,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,87,87,]),'res_int':([47,99,141,],[92,92,92,]),'res_char':([47,99,141,],[93,93,93,]),'res_string':([47,99,141,],[94,94,94,]),'res_double':([47,99,141,],[95,95,95,]),'res_boolean':([47,99,141,],[96,96,96,]),'tk_comma':([50,51,52,53,54,55,56,57,58,69,70,71,72,88,89,97,98,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,137,138,142,150,],[-82,-83,-84,-85,-86,-87,-88,-89,-90,-25,110,-28,-29,-79,-80,-77,-78,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,141,-23,-27,-81,-24,-22,]),'tk_twodot':([50,51,52,53,54,55,56,57,58,69,88,89,97,98,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,138,154,168,],[-82,-83,-84,-85,-86,-87,-88,-89,-90,-25,-79,-80,-77,-78,-26,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-62,-81,167,178,]),'tk_key_o':([107,128,132,133,134,140,175,179,],[136,139,143,144,145,149,180,183,]),'res_else':([162,],[175,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,136,139,143,145,149,167,178,180,183,],[2,147,148,151,157,161,177,182,184,185,]),'instruction':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[3,30,3,3,3,3,30,30,3,30,30,30,3,30,3,3,30,3,30,30,]),'statement':([0,2,63,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[4,4,104,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,63,136,139,143,145,147,148,149,151,157,158,161,167,177,178,180,182,183,184,185,],[5,5,105,5,5,5,5,5,5,5,5,5,172,5,5,5,5,5,5,5,5,5,]),'print':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,136,139,143,145,147,148,149,151,157,158,161,167,177,178,180,182,183,184,185,],[7,7,7,7,7,7,7,7,7,7,7,171,7,7,7,7,7,7,7,7,7,]),'conditional':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'transfer':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'functions':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'call_function':([0,2,22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,136,139,143,145,147,148,149,151,156,157,161,167,177,178,180,182,183,184,185,],[12,12,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,12,12,12,12,12,12,12,12,50,12,12,12,12,12,12,12,12,12,12,]),'con_if':([0,2,136,139,143,145,147,148,149,151,157,161,167,175,177,178,180,182,183,184,185,],[17,17,17,17,17,17,17,17,17,17,17,17,17,181,17,17,17,17,17,17,17,]),'con_switch':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'loop_while':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'loop_for':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'function_main':([0,2,136,139,143,145,147,148,149,151,157,161,167,177,178,180,182,183,184,185,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'ptcommaP':([4,5,6,7,10,12,],[31,34,35,36,37,38,]),'empty':([4,5,6,7,10,12,40,],[33,33,33,33,33,33,67,]),'expression':([22,41,44,45,47,48,49,60,61,62,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,110,127,135,156,],[46,68,72,73,90,97,98,100,101,102,108,112,113,114,115,116,117,118,119,120,121,122,123,124,125,72,138,146,168,]),'statementP':([40,],[65,]),'list_params_call':([44,],[70,]),'params_call':([44,110,],[71,137,]),'type':([47,99,141,],[91,131,131,]),'for_init':([63,],[103,]),'list_params':([99,],[129,]),'params':([99,141,],[130,150,]),'default':([144,153,],[152,165,]),'list_case':([144,],[153,]),'case':([144,153,],[155,166,]),'for_advance':([158,],[170,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',239),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',245),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',251),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',260),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',261),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',262),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',263),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',264),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',265),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',266),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',267),
  ('instruction -> call_function ptcommaP','instruction',2,'p_instruction','grammar.py',268),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',272),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',281),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',289),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',290),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',299),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',306),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',312),
  ('functions -> res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_c','functions',7,'p_function_whitout_params','grammar.py',319),
  ('functions -> res_func tk_id tk_par_o list_params tk_par_c tk_key_o instructions tk_key_c','functions',8,'p_function_whit_params','grammar.py',325),
  ('list_params -> list_params tk_comma params','list_params',3,'p_list_params_functions','grammar.py',333),
  ('list_params -> params','list_params',1,'p_list_params_params_funcion','grammar.py',341),
  ('params -> type tk_id','params',2,'p_params_of_function','grammar.py',346),
  ('call_function -> tk_id tk_par_o tk_par_c','call_function',3,'p_call_function_whitout_params','grammar.py',355),
  ('call_function -> tk_id tk_par_o list_params_call tk_par_c','call_function',4,'p_call_function_whit_params','grammar.py',360),
  ('list_params_call -> list_params_call tk_comma params_call','list_params_call',3,'p_list_params_call','grammar.py',368),
  ('list_params_call -> params_call','list_params_call',1,'p_list_params_call_param','grammar.py',373),
  ('params_call -> expression','params_call',1,'p_params_call','grammar.py',378),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',386),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',393),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',394),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',405),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',406),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',410),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',414),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',418),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',423),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',427),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',431),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',435),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',443),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',450),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',456),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',463),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',464),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',470),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',475),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',480),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',481),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',486),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',487),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',495),
  ('transfer -> res_return expression','transfer',2,'p_transfer_return','grammar.py',500),
  ('type -> res_int','type',1,'p_type','grammar.py',508),
  ('type -> res_char','type',1,'p_type','grammar.py',509),
  ('type -> res_string','type',1,'p_type','grammar.py',510),
  ('type -> res_double','type',1,'p_type','grammar.py',511),
  ('type -> res_boolean','type',1,'p_type','grammar.py',512),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',531),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',532),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',539),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',543),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',544),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',545),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',546),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',547),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',548),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',549),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',550),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',551),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',552),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',553),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',554),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',555),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',556),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',589),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',590),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',597),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',598),
  ('expression -> tk_par_o type tk_par_c expression','expression',4,'p_expression_unary_cast','grammar.py',606),
  ('expression -> call_function','expression',1,'p_expression_call_function','grammar.py',612),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',618),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',623),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',627),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',631),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',635),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',636),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',640),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',644),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',650),
]
