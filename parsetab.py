
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminuslefttk_inctk_decres_break res_case res_continue res_default res_else res_false res_for res_if res_length res_main res_new res_null res_print res_read res_return res_round res_switch res_tolower res_toupper res_true res_truncate res_typeof res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | functionsinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_dec\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[9,9,-3,-48,-48,-48,-48,-8,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,9,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,9,-15,]),'res_var':([0,2,3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[10,10,-3,-48,-48,-48,-48,-8,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,10,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,10,-15,]),'tk_id':([0,2,3,4,5,6,7,8,10,13,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[11,11,-3,-48,-48,-48,-48,-8,23,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,32,-17,-18,32,-10,32,-12,-46,-13,32,32,32,-40,-41,-42,-43,-44,-45,-47,-11,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-38,-39,-36,-37,-16,11,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,11,-15,]),'res_print':([0,2,3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[12,12,-3,-48,-48,-48,-48,-8,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,12,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,12,-15,]),'res_main':([0,2,3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[14,14,-3,-48,-48,-48,-48,-8,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,14,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,14,-15,]),'$end':([1,2,3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,],[0,-1,-3,-48,-48,-48,-48,-8,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,-15,]),'tk_key_c':([3,4,5,6,7,8,13,15,16,17,18,19,20,21,22,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[-3,-48,-48,-48,-48,-8,-14,-2,-4,-19,-20,-5,-6,-7,-9,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,84,-15,]),'tk_dotcomma':([4,5,6,7,9,23,25,26,29,31,32,33,37,38,39,40,41,42,43,46,61,62,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[17,17,17,17,22,-48,-17,-18,-10,-12,-46,-13,-40,-41,-42,-43,-44,-45,-47,-11,-38,-39,-36,-37,-16,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,]),'tk_assig':([11,23,],[24,30,]),'tk_inc':([11,32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[25,-46,61,-40,-41,-42,-43,-44,-45,-47,61,61,-38,-39,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-21,]),'tk_dec':([11,32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[26,-46,62,-40,-41,-42,-43,-44,-45,-47,62,62,-38,-39,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-21,]),'tk_par_o':([12,14,24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[27,28,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'tk_sub':([24,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[35,35,35,-46,48,35,35,35,-40,-41,-42,-43,-44,-45,-47,48,48,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-38,-39,48,-36,48,-22,-23,-24,-25,-26,-27,48,48,48,48,48,48,48,48,-21,]),'tk_not':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'tk_int':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'tk_decimal':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'tk_string':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'tk_char':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'res_true':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'res_false':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'res_null':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'tk_par_c':([28,32,37,38,39,40,41,42,43,44,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[45,-46,-40,-41,-42,-43,-44,-45,-47,66,-38,-39,82,-36,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,]),'tk_add':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,47,-40,-41,-42,-43,-44,-45,-47,47,47,-38,-39,47,-36,47,-22,-23,-24,-25,-26,-27,47,47,47,47,47,47,47,47,-21,]),'tk_mult':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,49,-40,-41,-42,-43,-44,-45,-47,49,49,-38,-39,49,-36,49,49,49,-24,-25,-26,-27,49,49,49,49,49,49,49,49,-21,]),'tk_div':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,50,-40,-41,-42,-43,-44,-45,-47,50,50,-38,-39,50,-36,50,50,50,-24,-25,-26,-27,50,50,50,50,50,50,50,50,-21,]),'tk_module':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,51,-40,-41,-42,-43,-44,-45,-47,51,51,-38,-39,51,-36,51,51,51,-24,-25,-26,-27,51,51,51,51,51,51,51,51,-21,]),'tk_pow':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,52,-40,-41,-42,-43,-44,-45,-47,52,52,-38,-39,52,-36,52,52,52,52,52,52,-27,52,52,52,52,52,52,52,52,-21,]),'tk_equals':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,53,-40,-41,-42,-43,-44,-45,-47,53,53,-38,-39,53,-36,53,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,53,53,-21,]),'tk_different':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,54,-40,-41,-42,-43,-44,-45,-47,54,54,-38,-39,54,-36,54,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,54,54,-21,]),'tk_greater':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,55,-40,-41,-42,-43,-44,-45,-47,55,55,-38,-39,55,-36,55,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,55,55,-21,]),'tk_greater_equals':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,56,-40,-41,-42,-43,-44,-45,-47,56,56,-38,-39,56,-36,56,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,56,56,-21,]),'tk_less':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,57,-40,-41,-42,-43,-44,-45,-47,57,57,-38,-39,57,-36,57,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,57,57,-21,]),'tk_less_equals':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,58,-40,-41,-42,-43,-44,-45,-47,58,58,-38,-39,58,-36,58,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,58,58,-21,]),'tk_and':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,59,-40,-41,-42,-43,-44,-45,-47,59,59,-38,-39,59,-36,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,59,-21,]),'tk_or':([32,33,37,38,39,40,41,42,43,44,46,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-46,60,-40,-41,-42,-43,-44,-45,-47,60,60,-38,-39,60,-36,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-21,]),'tk_key_o':([45,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,67,],[2,83,]),'instruction':([0,2,67,83,],[3,15,3,15,]),'statement':([0,2,67,83,],[4,4,4,4,]),'assignment':([0,2,67,83,],[5,5,5,5,]),'print':([0,2,67,83,],[6,6,6,6,]),'inc_dec':([0,2,67,83,],[7,7,7,7,]),'functions':([0,2,67,83,],[8,8,8,8,]),'function_main':([0,2,67,83,],[13,13,13,13,]),'ptcommaP':([4,5,6,7,],[16,19,20,21,]),'empty':([4,5,6,7,23,],[18,18,18,18,31,]),'statementP':([23,],[29,]),'expression':([24,27,30,34,35,36,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[33,44,46,63,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',219),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',225),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',231),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',240),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',241),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',242),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',243),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',244),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',248),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',257),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',265),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',266),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',275),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',282),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',288),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',295),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',302),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',303),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',313),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',314),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',321),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',325),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',326),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',327),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',328),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',329),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',330),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',331),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',332),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',333),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',334),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',335),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',336),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',337),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',338),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',371),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',372),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',379),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',380),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',389),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',394),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',398),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',402),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',406),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',407),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',411),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',415),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',421),
]
