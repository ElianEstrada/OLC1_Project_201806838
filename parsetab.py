
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initlefttk_orlefttk_andrighttk_unotlefttk_equalstk_differenttk_greatertk_greater_equalstk_lesstk_less_equalslefttk_addtk_sublefttk_multtk_divtk_modulelefttk_powrighttk_uminusrighttk_fcastlefttk_inctk_decres_boolean res_break res_case res_char res_continue res_default res_double res_else res_false res_for res_func res_if res_int res_main res_new res_null res_print res_read res_return res_string res_switch res_true res_var res_while tk_add tk_and tk_assig tk_brackets_c tk_brackets_o tk_char tk_comma tk_dec tk_decimal tk_different tk_div tk_dotcomma tk_equals tk_greater tk_greater_equals tk_id tk_inc tk_int tk_key_c tk_key_o tk_less tk_less_equals tk_module tk_mult tk_not tk_or tk_par_c tk_par_o tk_pow tk_string tk_sub tk_twodotinit : instructionsinstructions : instructions instructioninstructions : instructioninstruction : statement ptcommaP\n                   | assignment ptcommaP \n                   | print ptcommaP\n                   | inc_dec ptcommaP\n                   | conditional\n                   | loops\n                   | transfer ptcommaP\n                   | functions\n                   | call_function ptcommaPinstruction : error tk_dotcommastatement : res_var tk_id statementPstatementP : tk_assig expression\n                  | emptyassignment : tk_id tk_assig expressionfunctions : function_mainfunction_main : res_main tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_cfunctions : res_func tk_id tk_par_o list_params tk_par_c tk_key_o instructions tk_key_clist_params : list_params tk_comma paramslist_params : paramsparams : type tk_idcall_function : tk_id tk_par_o tk_par_ccall_function : tk_id tk_par_o list_params_call tk_par_clist_params_call : list_params_call tk_comma params_calllist_params_call : params_callparams_call : expressionprint : res_print tk_par_o expression tk_par_cinc_dec : tk_id tk_inc\n               | tk_id tk_decconditional : con_if\n                   | con_switchcon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_ccon_if : res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_ifcon_switch : res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_ccon_switch : res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_clist_case : list_case caselist_case : casecase : res_case expression tk_twodot instructionsdefault : res_default tk_twodot instructionsloops : loop_while\n             | loop_forloop_while : res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_cloop_for : res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_cfor_init : statement\n                | assignmentfor_advance : inc_dec\n                   | assignmenttransfer : res_breaktransfer : res_continuetransfer : res_return expressiontype : res_int\n            | res_char\n            | res_string\n            | res_double\n            | res_booleanptcommaP : tk_dotcomma\n                | emptyexpression : tk_par_o expression tk_par_cexpression : expression tk_add expression\n                  | expression tk_sub expression\n                  | expression tk_mult expression\n                  | expression tk_div expression\n                  | expression tk_module expression\n                  | expression tk_pow expression\n                  | expression tk_equals expression\n                  | expression tk_different expression\n                  | expression tk_greater expression\n                  | expression tk_greater_equals expression\n                  | expression tk_less expression\n                  | expression tk_less_equals expression\n                  | expression tk_and expression\n                  | expression tk_or expressionexpression : tk_sub expression %prec tk_uminus\n                  | tk_not expression %prec tk_unotexpression : expression tk_inc\n                  | expression tk_decexpression : tk_par_o type tk_par_c expression %prec tk_fcastexpression : call_functionexpression : res_read tk_par_o tk_par_c\n    expression :  tk_int\n    expression : tk_decimalexpression : tk_stringexpression : tk_charexpression : res_true\n                  | res_falseexpression : tk_idexpression : res_nullempty : '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[13,13,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,13,-82,13,13,13,13,13,13,13,13,-19,-20,13,-35,-38,-39,13,-47,-21,-40,13,13,13,-37,13,13,13,13,-36,-48,]),'res_var':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,65,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[14,14,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,14,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,14,-82,14,14,14,14,14,14,14,14,-19,-20,14,-35,-38,-39,14,-47,-21,-40,14,14,14,-37,14,14,14,14,-36,-48,]),'tk_id':([0,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,20,21,22,23,24,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,62,63,64,65,67,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,139,140,142,143,147,149,151,152,153,155,160,161,162,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[15,15,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,41,-33,-34,-45,-46,-53,-54,59,-18,61,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,59,-31,-32,59,59,-55,59,59,59,-83,-85,-86,-87,-88,-89,-90,-91,-92,59,59,59,109,-14,59,-16,-17,-25,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-80,-81,-56,-57,-58,-59,-60,-78,-79,-15,-26,59,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,59,-84,146,59,15,-82,15,15,15,15,15,15,15,59,15,177,-19,-20,15,-35,-38,-39,15,-47,-21,-40,15,15,15,-37,15,15,15,15,-36,-48,]),'res_print':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[16,16,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,16,-82,16,16,16,16,16,16,16,16,-19,-20,16,-35,-38,-39,16,-47,-21,-40,16,16,16,-37,16,16,16,16,-36,-48,]),'res_break':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[21,21,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,21,-82,21,21,21,21,21,21,21,21,-19,-20,21,-35,-38,-39,21,-47,-21,-40,21,21,21,-37,21,21,21,21,-36,-48,]),'res_continue':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[22,22,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,22,-82,22,22,22,22,22,22,22,22,-19,-20,22,-35,-38,-39,22,-47,-21,-40,22,22,22,-37,22,22,22,22,-36,-48,]),'res_return':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[23,23,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,23,-82,23,23,23,23,23,23,23,23,-19,-20,23,-35,-38,-39,23,-47,-21,-40,23,23,23,-37,23,23,23,23,-36,-48,]),'res_func':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[25,25,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,25,-82,25,25,25,25,25,25,25,25,-19,-20,25,-35,-38,-39,25,-47,-21,-40,25,25,25,-37,25,25,25,25,-36,-48,]),'res_if':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,179,180,181,182,184,185,186,187,188,189,190,191,],[26,26,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,26,-82,26,26,26,26,26,26,26,26,-19,-20,26,-35,-38,-39,26,-47,-21,26,-40,26,26,26,-37,26,26,26,26,-36,-48,]),'res_switch':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[27,27,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,27,-82,27,27,27,27,27,27,27,27,-19,-20,27,-35,-38,-39,27,-47,-21,-40,27,27,27,-37,27,27,27,27,-36,-48,]),'res_while':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[28,28,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,28,-82,28,28,28,28,28,28,28,28,-19,-20,28,-35,-38,-39,28,-47,-21,-40,28,28,28,-37,28,28,28,28,-36,-48,]),'res_for':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[29,29,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,29,-82,29,29,29,29,29,29,29,29,-19,-20,29,-35,-38,-39,29,-47,-21,-40,29,29,29,-37,29,29,29,29,-36,-48,]),'res_main':([0,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,140,142,143,147,149,151,152,153,155,161,163,164,165,166,167,168,171,173,178,180,181,182,184,185,186,187,188,189,190,191,],[30,30,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,30,-82,30,30,30,30,30,30,30,30,-19,-20,30,-35,-38,-39,30,-47,-21,-40,30,30,30,-37,30,30,30,30,-36,-48,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,163,164,166,167,168,173,178,180,185,190,191,],[0,-1,-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,-19,-20,-35,-38,-39,-47,-21,-40,-37,-36,-48,]),'tk_key_c':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,151,152,155,156,157,159,161,163,164,165,166,167,168,169,170,173,178,180,181,185,186,188,189,190,191,],[-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,163,164,166,167,168,-42,173,-19,-20,178,-35,-38,-39,180,-41,-47,-21,-40,-44,-37,-43,190,191,-36,-48,]),'res_default':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,148,157,159,163,164,166,167,168,170,173,178,180,185,186,190,191,],[-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,158,158,-42,-19,-20,-35,-38,-39,-41,-47,-21,-40,-37,-43,-36,-48,]),'res_case':([3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,24,31,32,33,34,35,36,37,38,39,40,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,148,157,159,163,164,166,167,168,170,173,178,180,185,186,190,191,],[-3,-93,-93,-93,-93,-8,-9,-93,-11,-93,-33,-34,-45,-46,-53,-54,-18,-2,-4,-61,-62,-5,-6,-7,-10,-12,-13,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,160,160,-42,-19,-20,-35,-38,-39,-41,-47,-21,-40,-37,-43,-36,-48,]),'tk_dotcomma':([4,5,6,7,10,12,13,21,22,41,43,44,47,51,53,54,55,56,57,58,59,60,67,69,70,71,90,91,99,100,106,107,108,111,112,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,],[33,33,33,33,33,33,40,-53,-54,-93,-31,-32,-55,-83,-85,-86,-87,-88,-89,-90,-91,-92,-14,-16,-17,-25,-80,-81,-78,-79,139,-49,-50,-15,-26,-30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,162,]),'tk_assig':([15,41,109,177,],[42,68,42,42,]),'tk_inc':([15,47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,177,],[43,90,-83,-85,-86,-87,-88,-89,-90,-91,-92,90,-25,90,90,-80,-81,90,90,90,90,90,90,90,-26,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-63,-84,90,90,90,43,]),'tk_dec':([15,47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,177,],[44,91,-83,-85,-86,-87,-88,-89,-90,-91,-92,91,-25,91,91,-80,-81,91,91,91,91,91,91,91,-26,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-63,-84,91,91,91,44,]),'tk_par_o':([15,16,23,26,27,28,29,30,42,45,46,48,49,50,52,59,61,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[45,46,48,62,63,64,65,66,48,48,48,48,48,48,101,45,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'tk_sub':([23,42,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,62,63,64,68,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,103,104,105,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,142,150,160,172,],[49,49,49,49,77,49,49,49,-83,-85,-86,-87,-88,-89,-90,-91,-92,49,49,49,49,77,-25,77,77,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-80,-81,77,-78,77,77,77,77,77,-26,49,-64,-65,-66,-67,-68,-69,77,77,77,77,77,77,77,77,-63,49,-84,49,-82,77,49,77,]),'tk_not':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'res_read':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'tk_int':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'tk_decimal':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'tk_string':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'tk_char':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'res_true':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'res_false':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'res_null':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'tk_par_c':([43,44,45,51,53,54,55,56,57,58,59,60,66,70,71,72,73,74,75,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,134,141,142,146,154,174,175,176,],[-31,-32,71,-83,-85,-86,-87,-88,-89,-90,-91,-92,110,-17,-25,112,-28,-29,114,-80,-81,129,130,-56,-57,-58,-59,-60,-78,-79,131,132,136,137,138,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,144,-23,-27,-82,-24,-22,183,-51,-52,]),'tk_add':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[76,-83,-85,-86,-87,-88,-89,-90,-91,-92,76,-25,76,76,-80,-81,76,-78,76,76,76,76,76,-26,-64,-65,-66,-67,-68,-69,76,76,76,76,76,76,76,76,-63,-84,-82,76,76,]),'tk_mult':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[78,-83,-85,-86,-87,-88,-89,-90,-91,-92,78,-25,78,78,-80,-81,78,-78,78,78,78,78,78,-26,78,78,-66,-67,-68,-69,78,78,78,78,78,78,78,78,-63,-84,-82,78,78,]),'tk_div':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[79,-83,-85,-86,-87,-88,-89,-90,-91,-92,79,-25,79,79,-80,-81,79,-78,79,79,79,79,79,-26,79,79,-66,-67,-68,-69,79,79,79,79,79,79,79,79,-63,-84,-82,79,79,]),'tk_module':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[80,-83,-85,-86,-87,-88,-89,-90,-91,-92,80,-25,80,80,-80,-81,80,-78,80,80,80,80,80,-26,80,80,-66,-67,-68,-69,80,80,80,80,80,80,80,80,-63,-84,-82,80,80,]),'tk_pow':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[81,-83,-85,-86,-87,-88,-89,-90,-91,-92,81,-25,81,81,-80,-81,81,-78,81,81,81,81,81,-26,81,81,81,81,81,-69,81,81,81,81,81,81,81,81,-63,-84,-82,81,81,]),'tk_equals':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[82,-83,-85,-86,-87,-88,-89,-90,-91,-92,82,-25,82,82,-80,-81,82,-78,82,82,82,82,82,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,82,82,-63,-84,-82,82,82,]),'tk_different':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[83,-83,-85,-86,-87,-88,-89,-90,-91,-92,83,-25,83,83,-80,-81,83,-78,83,83,83,83,83,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,83,83,-63,-84,-82,83,83,]),'tk_greater':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[84,-83,-85,-86,-87,-88,-89,-90,-91,-92,84,-25,84,84,-80,-81,84,-78,84,84,84,84,84,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,84,84,-63,-84,-82,84,84,]),'tk_greater_equals':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[85,-83,-85,-86,-87,-88,-89,-90,-91,-92,85,-25,85,85,-80,-81,85,-78,85,85,85,85,85,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,85,85,-63,-84,-82,85,85,]),'tk_less':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[86,-83,-85,-86,-87,-88,-89,-90,-91,-92,86,-25,86,86,-80,-81,86,-78,86,86,86,86,86,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,86,86,-63,-84,-82,86,86,]),'tk_less_equals':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[87,-83,-85,-86,-87,-88,-89,-90,-91,-92,87,-25,87,87,-80,-81,87,-78,87,87,87,87,87,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,87,87,-63,-84,-82,87,87,]),'tk_and':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[88,-83,-85,-86,-87,-88,-89,-90,-91,-92,88,-25,88,88,-80,-81,88,-78,-79,88,88,88,88,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,88,-63,-84,-82,88,88,]),'tk_or':([47,51,53,54,55,56,57,58,59,60,70,71,74,75,90,91,92,99,100,103,104,105,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,150,172,],[89,-83,-85,-86,-87,-88,-89,-90,-91,-92,89,-25,89,89,-80,-81,89,-78,-79,89,89,89,89,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,89,89,]),'res_int':([48,102,145,],[94,94,94,]),'res_char':([48,102,145,],[95,95,95,]),'res_string':([48,102,145,],[96,96,96,]),'res_double':([48,102,145,],[97,97,97,]),'res_boolean':([48,102,145,],[98,98,98,]),'tk_comma':([51,53,54,55,56,57,58,59,60,71,72,73,74,90,91,99,100,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,134,141,142,146,154,],[-83,-85,-86,-87,-88,-89,-90,-91,-92,-25,113,-28,-29,-80,-81,-78,-79,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,145,-23,-27,-82,-24,-22,]),'tk_twodot':([51,53,54,55,56,57,58,59,60,71,90,91,99,100,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,142,158,172,],[-83,-85,-86,-87,-88,-89,-90,-91,-92,-25,-80,-81,-78,-79,-26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-84,-82,171,182,]),'tk_key_o':([110,132,136,137,138,144,179,183,],[140,143,147,148,149,153,184,187,]),'res_else':([166,],[179,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instructions':([0,140,143,147,149,153,171,182,184,187,],[2,151,152,155,161,165,181,186,188,189,]),'instruction':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[3,31,3,3,3,3,31,31,3,31,31,31,3,31,3,3,31,3,31,31,]),'statement':([0,2,65,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[4,4,107,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,65,140,143,147,149,151,152,153,155,161,162,165,171,181,182,184,186,187,188,189,],[5,5,108,5,5,5,5,5,5,5,5,5,176,5,5,5,5,5,5,5,5,5,]),'print':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'inc_dec':([0,2,140,143,147,149,151,152,153,155,161,162,165,171,181,182,184,186,187,188,189,],[7,7,7,7,7,7,7,7,7,7,7,175,7,7,7,7,7,7,7,7,7,]),'conditional':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loops':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'transfer':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'functions':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'call_function':([0,2,23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,140,143,147,149,151,152,153,155,160,161,165,171,181,182,184,186,187,188,189,],[12,12,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,12,12,12,12,12,12,12,12,51,12,12,12,12,12,12,12,12,12,12,]),'con_if':([0,2,140,143,147,149,151,152,153,155,161,165,171,179,181,182,184,186,187,188,189,],[17,17,17,17,17,17,17,17,17,17,17,17,17,185,17,17,17,17,17,17,17,]),'con_switch':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'loop_while':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'loop_for':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'function_main':([0,2,140,143,147,149,151,152,153,155,161,165,171,181,182,184,186,187,188,189,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'ptcommaP':([4,5,6,7,10,12,],[32,35,36,37,38,39,]),'empty':([4,5,6,7,10,12,41,],[34,34,34,34,34,34,69,]),'expression':([23,42,45,46,48,49,50,62,63,64,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,113,130,139,160,],[47,70,74,75,92,99,100,103,104,105,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,74,142,150,172,]),'statementP':([41,],[67,]),'list_params_call':([45,],[72,]),'params_call':([45,113,],[73,141,]),'type':([48,102,145,],[93,135,135,]),'for_init':([65,],[106,]),'list_params':([102,],[133,]),'params':([102,145,],[134,154,]),'default':([148,157,],[156,169,]),'list_case':([148,],[157,]),'case':([148,157,],[159,170,]),'for_advance':([162,],[174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instructions','init',1,'p_init','grammar.py',235),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','grammar.py',241),
  ('instructions -> instruction','instructions',1,'p_instructions_instruction','grammar.py',247),
  ('instruction -> statement ptcommaP','instruction',2,'p_instruction','grammar.py',256),
  ('instruction -> assignment ptcommaP','instruction',2,'p_instruction','grammar.py',257),
  ('instruction -> print ptcommaP','instruction',2,'p_instruction','grammar.py',258),
  ('instruction -> inc_dec ptcommaP','instruction',2,'p_instruction','grammar.py',259),
  ('instruction -> conditional','instruction',1,'p_instruction','grammar.py',260),
  ('instruction -> loops','instruction',1,'p_instruction','grammar.py',261),
  ('instruction -> transfer ptcommaP','instruction',2,'p_instruction','grammar.py',262),
  ('instruction -> functions','instruction',1,'p_instruction','grammar.py',263),
  ('instruction -> call_function ptcommaP','instruction',2,'p_instruction','grammar.py',264),
  ('instruction -> error tk_dotcomma','instruction',2,'p_instruction_error','grammar.py',268),
  ('statement -> res_var tk_id statementP','statement',3,'p_statement','grammar.py',277),
  ('statementP -> tk_assig expression','statementP',2,'p_statementP','grammar.py',285),
  ('statementP -> empty','statementP',1,'p_statementP','grammar.py',286),
  ('assignment -> tk_id tk_assig expression','assignment',3,'p_assignment','grammar.py',295),
  ('functions -> function_main','functions',1,'p_functions','grammar.py',302),
  ('function_main -> res_main tk_par_o tk_par_c tk_key_o instructions tk_key_c','function_main',6,'p_function_main','grammar.py',308),
  ('functions -> res_func tk_id tk_par_o tk_par_c tk_key_o instructions tk_key_c','functions',7,'p_function_whitout_params','grammar.py',315),
  ('functions -> res_func tk_id tk_par_o list_params tk_par_c tk_key_o instructions tk_key_c','functions',8,'p_function_whit_params','grammar.py',321),
  ('list_params -> list_params tk_comma params','list_params',3,'p_list_params_functions','grammar.py',329),
  ('list_params -> params','list_params',1,'p_list_params_params_funcion','grammar.py',337),
  ('params -> type tk_id','params',2,'p_params_of_function','grammar.py',342),
  ('call_function -> tk_id tk_par_o tk_par_c','call_function',3,'p_call_function_whitout_params','grammar.py',351),
  ('call_function -> tk_id tk_par_o list_params_call tk_par_c','call_function',4,'p_call_function_whit_params','grammar.py',356),
  ('list_params_call -> list_params_call tk_comma params_call','list_params_call',3,'p_list_params_call','grammar.py',364),
  ('list_params_call -> params_call','list_params_call',1,'p_list_params_call_param','grammar.py',369),
  ('params_call -> expression','params_call',1,'p_params_call','grammar.py',374),
  ('print -> res_print tk_par_o expression tk_par_c','print',4,'p_print','grammar.py',382),
  ('inc_dec -> tk_id tk_inc','inc_dec',2,'p_inc_dec','grammar.py',389),
  ('inc_dec -> tk_id tk_dec','inc_dec',2,'p_inc_dec','grammar.py',390),
  ('conditional -> con_if','conditional',1,'p_conditionals','grammar.py',401),
  ('conditional -> con_switch','conditional',1,'p_conditionals','grammar.py',402),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','con_if',7,'p_conditional_if','grammar.py',406),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else tk_key_o instructions tk_key_c','con_if',11,'p_conditional_if_else','grammar.py',410),
  ('con_if -> res_if tk_par_o expression tk_par_c tk_key_o instructions tk_key_c res_else con_if','con_if',9,'p_conditional_if_else_if','grammar.py',414),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o default tk_key_c','con_switch',7,'p_conditional_switch_default','grammar.py',419),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case tk_key_c','con_switch',7,'p_conditional_switch_case','grammar.py',423),
  ('con_switch -> res_switch tk_par_o expression tk_par_c tk_key_o list_case default tk_key_c','con_switch',8,'p_conditional_switch','grammar.py',427),
  ('list_case -> list_case case','list_case',2,'p_conditional_switch_list_case','grammar.py',431),
  ('list_case -> case','list_case',1,'p_conditional_case','grammar.py',439),
  ('case -> res_case expression tk_twodot instructions','case',4,'p_case','grammar.py',446),
  ('default -> res_default tk_twodot instructions','default',3,'p_default','grammar.py',452),
  ('loops -> loop_while','loops',1,'p_loops','grammar.py',459),
  ('loops -> loop_for','loops',1,'p_loops','grammar.py',460),
  ('loop_while -> res_while tk_par_o expression tk_par_c tk_key_o instructions tk_key_c','loop_while',7,'p_loops_while','grammar.py',466),
  ('loop_for -> res_for tk_par_o for_init tk_dotcomma expression tk_dotcomma for_advance tk_par_c tk_key_o instructions tk_key_c','loop_for',11,'p_loops_for','grammar.py',471),
  ('for_init -> statement','for_init',1,'p_loops_for_init','grammar.py',476),
  ('for_init -> assignment','for_init',1,'p_loops_for_init','grammar.py',477),
  ('for_advance -> inc_dec','for_advance',1,'p_loops_for_advance','grammar.py',482),
  ('for_advance -> assignment','for_advance',1,'p_loops_for_advance','grammar.py',483),
  ('transfer -> res_break','transfer',1,'p_transfer_break','grammar.py',491),
  ('transfer -> res_continue','transfer',1,'p_transfer_continue','grammar.py',496),
  ('transfer -> res_return expression','transfer',2,'p_transfer_return','grammar.py',501),
  ('type -> res_int','type',1,'p_type','grammar.py',509),
  ('type -> res_char','type',1,'p_type','grammar.py',510),
  ('type -> res_string','type',1,'p_type','grammar.py',511),
  ('type -> res_double','type',1,'p_type','grammar.py',512),
  ('type -> res_boolean','type',1,'p_type','grammar.py',513),
  ('ptcommaP -> tk_dotcomma','ptcommaP',1,'p_ptcommaP','grammar.py',532),
  ('ptcommaP -> empty','ptcommaP',1,'p_ptcommaP','grammar.py',533),
  ('expression -> tk_par_o expression tk_par_c','expression',3,'p_grouping_expression','grammar.py',540),
  ('expression -> expression tk_add expression','expression',3,'p_expression_binary','grammar.py',544),
  ('expression -> expression tk_sub expression','expression',3,'p_expression_binary','grammar.py',545),
  ('expression -> expression tk_mult expression','expression',3,'p_expression_binary','grammar.py',546),
  ('expression -> expression tk_div expression','expression',3,'p_expression_binary','grammar.py',547),
  ('expression -> expression tk_module expression','expression',3,'p_expression_binary','grammar.py',548),
  ('expression -> expression tk_pow expression','expression',3,'p_expression_binary','grammar.py',549),
  ('expression -> expression tk_equals expression','expression',3,'p_expression_binary','grammar.py',550),
  ('expression -> expression tk_different expression','expression',3,'p_expression_binary','grammar.py',551),
  ('expression -> expression tk_greater expression','expression',3,'p_expression_binary','grammar.py',552),
  ('expression -> expression tk_greater_equals expression','expression',3,'p_expression_binary','grammar.py',553),
  ('expression -> expression tk_less expression','expression',3,'p_expression_binary','grammar.py',554),
  ('expression -> expression tk_less_equals expression','expression',3,'p_expression_binary','grammar.py',555),
  ('expression -> expression tk_and expression','expression',3,'p_expression_binary','grammar.py',556),
  ('expression -> expression tk_or expression','expression',3,'p_expression_binary','grammar.py',557),
  ('expression -> tk_sub expression','expression',2,'p_expression_unary','grammar.py',590),
  ('expression -> tk_not expression','expression',2,'p_expression_unary','grammar.py',591),
  ('expression -> expression tk_inc','expression',2,'p_expression_unary_right','grammar.py',598),
  ('expression -> expression tk_dec','expression',2,'p_expression_unary_right','grammar.py',599),
  ('expression -> tk_par_o type tk_par_c expression','expression',4,'p_expression_unary_cast','grammar.py',607),
  ('expression -> call_function','expression',1,'p_expression_call_function','grammar.py',613),
  ('expression -> res_read tk_par_o tk_par_c','expression',3,'p_expression_read','grammar.py',617),
  ('expression -> tk_int','expression',1,'p_expression_primitive_int','grammar.py',623),
  ('expression -> tk_decimal','expression',1,'p_expression_primitive_float','grammar.py',628),
  ('expression -> tk_string','expression',1,'p_expression_primitive_string','grammar.py',632),
  ('expression -> tk_char','expression',1,'p_expression_primitive_char','grammar.py',636),
  ('expression -> res_true','expression',1,'p_epression_primitive_bool','grammar.py',640),
  ('expression -> res_false','expression',1,'p_epression_primitive_bool','grammar.py',641),
  ('expression -> tk_id','expression',1,'p_expression_primitive_id','grammar.py',645),
  ('expression -> res_null','expression',1,'p_expression_primitive_null','grammar.py',649),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',655),
]
